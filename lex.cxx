/* A lexical scanner generated by flex */


#define FLEX_SCANNER

#include <io.h>
#include <stdlib.h>
#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

 /* Enter a start condition.  This macro really ought to take a parameter,
  * but we do it the disgusting crufty way forced on us by the ()-less
  * definition of BEGIN.
  */
#define BEGIN yy_start = 1 + 2 *

  /* Translate the current start state into a value that can be later handed
   * to BEGIN to return to the state.
   */
#define YY_START ((yy_start - 1) / 2)

   /* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

 /* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state* YY_BUFFER_STATE;

extern int yyleng;
extern FILE* yyin, * yyout;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO((void));
#ifdef __cplusplus
}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

 /* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
{
	FILE* yy_input_file;

	char* yy_ch_buf;		/* input buffer */
	char* yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


 /* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char* yy_c_buf_p = (char*)0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static void yyunput YY_PROTO((int c, char* buf_ptr));
void yyrestart YY_PROTO((FILE* input_file));
void yy_switch_to_buffer YY_PROTO((YY_BUFFER_STATE new_buffer));
void yy_load_buffer_state YY_PROTO((void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO((FILE* file, int size));
void yy_delete_buffer YY_PROTO((YY_BUFFER_STATE b));
void yy_init_buffer YY_PROTO((YY_BUFFER_STATE b, FILE* file));

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int* yy_start_stack = 0;
static void yy_push_state YY_PROTO((int new_state));
static void yy_pop_state YY_PROTO((void));
static int yy_top_state YY_PROTO((void));

static void* yy_flex_alloc YY_PROTO((unsigned int));
static void* yy_flex_realloc YY_PROTO((void*, unsigned int));
static void yy_flex_free YY_PROTO((void*));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
#define incl 1
#define use 2
typedef unsigned char YY_CHAR;
typedef const struct yy_trans_info* yy_state_type;
FILE* yyin = (FILE*)0, * yyout = (FILE*)0;
extern char* yytext;
#define yytext_ptr yytext

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char*, const char*, int));
#endif

#ifdef __cplusplus
static int yyinput YY_PROTO((void));
#else
static int input YY_PROTO((void));
#endif

static yy_state_type yy_get_previous_state YY_PROTO((void));
static yy_state_type yy_try_NUL_trans YY_PROTO((yy_state_type current_state));
static int yy_get_next_buffer YY_PROTO((void));
static void yy_fatal_error YY_PROTO((const char msg[]));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 61
struct yy_trans_info
{
	short yy_verify;
	short yy_nxt;
};
static const struct yy_trans_info yy_transition[6753] =
{
  0,     0,      0,  6497,      0,     0,      0,  6495,      1,  1548,
  2,  1548,      3,  1548,      4,  1548,      5,  1548,      6,  1548,
  7,  1548,      8,  1548,      9,  1550,     10,  1552,     11,  1548,
 12,  1550,     13,  1548,     14,  1548,     15,  1548,     16,  1548,
 17,  1548,     18,  1548,     19,  1548,     20,  1548,     21,  1548,
 22,  1548,     23,  1548,     24,  1548,     25,  1548,     26,  1548,
 27,  1548,     28,  1548,     29,  1548,     30,  1548,     31,  1548,
 32,  1550,     33,  1548,     34,  1548,     35,  1554,     36,  1565,
 37,  1556,     38,  1567,     39,  1689,     40,  1947,     41,  1949,
 42,  1951,     43,  1953,     44,  1955,     45,  1957,     46,  1959,

 47,  1961,     48,  1975,     49,  1999,     50,  1999,     51,  1999,
 52,  1999,     53,  1999,     54,  1999,     55,  1999,     56,  1999,
 57,  1999,     58,  1972,     59,  1977,     60,  1997,     61,  2002,
 62,  2008,     63,  1548,     64,  2016,     65,  1565,     66,  1565,
 67,  1565,     68,  1565,     69,  1565,     70,  1565,     71,  1565,
 72,  1565,     73,  1565,     74,  1565,     75,  1565,     76,  1565,
 77,  1565,     78,  1565,     79,  1565,     80,  1565,     81,  1565,
 82,  1565,     83,  1565,     84,  1565,     85,  2062,     86,  1565,
 87,  1565,     88,  1565,     89,  1565,     90,  1565,     91,  2020,
 92,  1548,     93,  2036,     94,  2038,     95,  1565,     96,  1548,

 97,  1565,     98,  1565,     99,  1565,    100,  1565,    101,  1565,
102,  1565,    103,  1565,    104,  1565,    105,  1565,    106,  1565,
107,  1565,    108,  1565,    109,  1565,    110,  1565,    111,  1565,
112,  1565,    113,  1565,    114,  1565,    115,  1565,    116,  1565,
117,  2062,    118,  1565,    119,  1565,    120,  1565,    121,  1565,
122,  1565,    123,  2043,    124,  2092,    125,  1548,    126,  2094,
127,  1548,    128,  1548,    129,  1548,    130,  1548,    131,  1548,
132,  1548,    133,  1548,    134,  1548,    135,  1548,    136,  1548,
137,  1548,    138,  1548,    139,  1548,    140,  1548,    141,  1548,
142,  1548,    143,  1548,    144,  1548,    145,  1548,    146,  1548,

147,  1548,    148,  1548,    149,  1548,    150,  1548,    151,  1548,
152,  1548,    153,  1548,    154,  1548,    155,  1548,    156,  1548,
157,  1548,    158,  1548,    159,  1548,    160,  1548,    161,  1548,
162,  1548,    163,  1548,    164,  1548,    165,  1548,    166,  1548,
167,  1548,    168,  1548,    169,  1548,    170,  1548,    171,  1548,
172,  1548,    173,  1548,    174,  1548,    175,  1548,    176,  1548,
177,  1548,    178,  1548,    179,  1548,    180,  1548,    181,  1548,
182,  1548,    183,  1548,    184,  1548,    185,  1548,    186,  1548,
187,  1548,    188,  1548,    189,  1548,    190,  1548,    191,  1548,
192,  1548,    193,  1548,    194,  1548,    195,  1548,    196,  1548,

197,  1548,    198,  1548,    199,  1548,    200,  1548,    201,  1548,
202,  1548,    203,  1548,    204,  1548,    205,  1548,    206,  1548,
207,  1548,    208,  1548,    209,  1548,    210,  1548,    211,  1548,
212,  1548,    213,  1548,    214,  1548,    215,  1548,    216,  1548,
217,  1548,    218,  1548,    219,  1548,    220,  1548,    221,  1548,
222,  1548,    223,  1548,    224,  1548,    225,  1548,    226,  1548,
227,  1548,    228,  1548,    229,  1548,    230,  1548,    231,  1548,
232,  1548,    233,  1548,    234,  1548,    235,  1548,    236,  1548,
237,  1548,    238,  1548,    239,  1548,    240,  1548,    241,  1548,
242,  1548,    243,  1548,    244,  1548,    245,  1548,    246,  1548,

247,  1548,    248,  1548,    249,  1548,    250,  1548,    251,  1548,
252,  1548,    253,  1548,    254,  1548,    255,  1548,    256,  1548,
  0,     0,      0,  6237,      1,  1290,      2,  1290,      3,  1290,
  4,  1290,      5,  1290,      6,  1290,      7,  1290,      8,  1290,
  9,  1292,     10,  1294,     11,  1290,     12,  1292,     13,  1290,
 14,  1290,     15,  1290,     16,  1290,     17,  1290,     18,  1290,
 19,  1290,     20,  1290,     21,  1290,     22,  1290,     23,  1290,
 24,  1290,     25,  1290,     26,  1290,     27,  1290,     28,  1290,
 29,  1290,     30,  1290,     31,  1290,     32,  1292,     33,  1290,
 34,  1290,     35,  1296,     36,  1307,     37,  1298,     38,  1309,

 39,  1431,     40,  1689,     41,  1691,     42,  1693,     43,  1695,
 44,  1697,     45,  1699,     46,  1701,     47,  1703,     48,  1717,
 49,  1741,     50,  1741,     51,  1741,     52,  1741,     53,  1741,
 54,  1741,     55,  1741,     56,  1741,     57,  1741,     58,  1714,
 59,  1719,     60,  1739,     61,  1744,     62,  1750,     63,  1290,
 64,  1758,     65,  1307,     66,  1307,     67,  1307,     68,  1307,
 69,  1307,     70,  1307,     71,  1307,     72,  1307,     73,  1307,
 74,  1307,     75,  1307,     76,  1307,     77,  1307,     78,  1307,
 79,  1307,     80,  1307,     81,  1307,     82,  1307,     83,  1307,
 84,  1307,     85,  1804,     86,  1307,     87,  1307,     88,  1307,

 89,  1307,     90,  1307,     91,  1762,     92,  1290,     93,  1778,
 94,  1780,     95,  1307,     96,  1290,     97,  1307,     98,  1307,
 99,  1307,    100,  1307,    101,  1307,    102,  1307,    103,  1307,
104,  1307,    105,  1307,    106,  1307,    107,  1307,    108,  1307,
109,  1307,    110,  1307,    111,  1307,    112,  1307,    113,  1307,
114,  1307,    115,  1307,    116,  1307,    117,  1804,    118,  1307,
119,  1307,    120,  1307,    121,  1307,    122,  1307,    123,  1785,
124,  1834,    125,  1290,    126,  1836,    127,  1290,    128,  1290,
129,  1290,    130,  1290,    131,  1290,    132,  1290,    133,  1290,
134,  1290,    135,  1290,    136,  1290,    137,  1290,    138,  1290,

139,  1290,    140,  1290,    141,  1290,    142,  1290,    143,  1290,
144,  1290,    145,  1290,    146,  1290,    147,  1290,    148,  1290,
149,  1290,    150,  1290,    151,  1290,    152,  1290,    153,  1290,
154,  1290,    155,  1290,    156,  1290,    157,  1290,    158,  1290,
159,  1290,    160,  1290,    161,  1290,    162,  1290,    163,  1290,
164,  1290,    165,  1290,    166,  1290,    167,  1290,    168,  1290,
169,  1290,    170,  1290,    171,  1290,    172,  1290,    173,  1290,
174,  1290,    175,  1290,    176,  1290,    177,  1290,    178,  1290,
179,  1290,    180,  1290,    181,  1290,    182,  1290,    183,  1290,
184,  1290,    185,  1290,    186,  1290,    187,  1290,    188,  1290,

189,  1290,    190,  1290,    191,  1290,    192,  1290,    193,  1290,
194,  1290,    195,  1290,    196,  1290,    197,  1290,    198,  1290,
199,  1290,    200,  1290,    201,  1290,    202,  1290,    203,  1290,
204,  1290,    205,  1290,    206,  1290,    207,  1290,    208,  1290,
209,  1290,    210,  1290,    211,  1290,    212,  1290,    213,  1290,
214,  1290,    215,  1290,    216,  1290,    217,  1290,    218,  1290,
219,  1290,    220,  1290,    221,  1290,    222,  1290,    223,  1290,
224,  1290,    225,  1290,    226,  1290,    227,  1290,    228,  1290,
229,  1290,    230,  1290,    231,  1290,    232,  1290,    233,  1290,
234,  1290,    235,  1290,    236,  1290,    237,  1290,    238,  1290,

239,  1290,    240,  1290,    241,  1290,    242,  1290,    243,  1290,
244,  1290,    245,  1290,    246,  1290,    247,  1290,    248,  1290,
249,  1290,    250,  1290,    251,  1290,    252,  1290,    253,  1290,
254,  1290,    255,  1290,    256,  1290,      0,     9,      0,  5979,
  1,  1670,      2,  1670,      3,  1670,      4,  1670,      5,  1670,
  6,  1670,      7,  1670,      8,  1670,      9,  1928,     10,  2186,
 11,  1670,     12,  1670,     13,  1670,     14,  1670,     15,  1670,
 16,  1670,     17,  1670,     18,  1670,     19,  1670,     20,  1670,
 21,  1670,     22,  1670,     23,  1670,     24,  1670,     25,  1670,
 26,  1670,     27,  1670,     28,  1670,     29,  1670,     30,  1670,

 31,  1670,     32,  1928,     33,  1670,     34,  1670,     35,  1670,
 36,  1670,     37,  1670,     38,  1670,     39,  1670,     40,  1670,
 41,  1670,     42,  1670,     43,  1670,     44,  1670,     45,  1670,
 46,  1670,     47,  1670,     48,  1670,     49,  1670,     50,  1670,
 51,  1670,     52,  1670,     53,  1670,     54,  1670,     55,  1670,
 56,  1670,     57,  1670,     58,  1670,     59,  2188,     60,  1670,
 61,  1670,     62,  1670,     63,  1670,     64,  1670,     65,  1670,
 66,  1670,     67,  1670,     68,  1670,     69,  1670,     70,  1670,
 71,  1670,     72,  1670,     73,  1670,     74,  1670,     75,  1670,
 76,  1670,     77,  1670,     78,  1670,     79,  1670,     80,  1670,

 81,  1670,     82,  1670,     83,  1670,     84,  1670,     85,  1670,
 86,  1670,     87,  1670,     88,  1670,     89,  1670,     90,  1670,
 91,  1670,     92,  1670,     93,  1670,     94,  1670,     95,  1670,
 96,  1670,     97,  1670,     98,  1670,     99,  1670,    100,  1670,
101,  1670,    102,  1670,    103,  1670,    104,  1670,    105,  1670,
106,  1670,    107,  1670,    108,  1670,    109,  1670,    110,  1670,
111,  1670,    112,  1670,    113,  1670,    114,  1670,    115,  1670,
116,  1670,    117,  1670,    118,  1670,    119,  1670,    120,  1670,
121,  1670,    122,  1670,    123,  1670,    124,  1670,    125,  1670,
126,  1670,    127,  1670,    128,  1670,    129,  1670,    130,  1670,

131,  1670,    132,  1670,    133,  1670,    134,  1670,    135,  1670,
136,  1670,    137,  1670,    138,  1670,    139,  1670,    140,  1670,
141,  1670,    142,  1670,    143,  1670,    144,  1670,    145,  1670,
146,  1670,    147,  1670,    148,  1670,    149,  1670,    150,  1670,
151,  1670,    152,  1670,    153,  1670,    154,  1670,    155,  1670,
156,  1670,    157,  1670,    158,  1670,    159,  1670,    160,  1670,
161,  1670,    162,  1670,    163,  1670,    164,  1670,    165,  1670,
166,  1670,    167,  1670,    168,  1670,    169,  1670,    170,  1670,
171,  1670,    172,  1670,    173,  1670,    174,  1670,    175,  1670,
176,  1670,    177,  1670,    178,  1670,    179,  1670,    180,  1670,

181,  1670,    182,  1670,    183,  1670,    184,  1670,    185,  1670,
186,  1670,    187,  1670,    188,  1670,    189,  1670,    190,  1670,
191,  1670,    192,  1670,    193,  1670,    194,  1670,    195,  1670,
196,  1670,    197,  1670,    198,  1670,    199,  1670,    200,  1670,
201,  1670,    202,  1670,    203,  1670,    204,  1670,    205,  1670,
206,  1670,    207,  1670,    208,  1670,    209,  1670,    210,  1670,
211,  1670,    212,  1670,    213,  1670,    214,  1670,    215,  1670,
216,  1670,    217,  1670,    218,  1670,    219,  1670,    220,  1670,
221,  1670,    222,  1670,    223,  1670,    224,  1670,    225,  1670,
226,  1670,    227,  1670,    228,  1670,    229,  1670,    230,  1670,

231,  1670,    232,  1670,    233,  1670,    234,  1670,    235,  1670,
236,  1670,    237,  1670,    238,  1670,    239,  1670,    240,  1670,
241,  1670,    242,  1670,    243,  1670,    244,  1670,    245,  1670,
246,  1670,    247,  1670,    248,  1670,    249,  1670,    250,  1670,
251,  1670,    252,  1670,    253,  1670,    254,  1670,    255,  1670,
256,  1670,      0,     9,      0,  5721,      1,  1412,      2,  1412,
  3,  1412,      4,  1412,      5,  1412,      6,  1412,      7,  1412,
  8,  1412,      9,  1670,     10,  1928,     11,  1412,     12,  1412,
 13,  1412,     14,  1412,     15,  1412,     16,  1412,     17,  1412,
 18,  1412,     19,  1412,     20,  1412,     21,  1412,     22,  1412,

 23,  1412,     24,  1412,     25,  1412,     26,  1412,     27,  1412,
 28,  1412,     29,  1412,     30,  1412,     31,  1412,     32,  1670,
 33,  1412,     34,  1412,     35,  1412,     36,  1412,     37,  1412,
 38,  1412,     39,  1412,     40,  1412,     41,  1412,     42,  1412,
 43,  1412,     44,  1412,     45,  1412,     46,  1412,     47,  1412,
 48,  1412,     49,  1412,     50,  1412,     51,  1412,     52,  1412,
 53,  1412,     54,  1412,     55,  1412,     56,  1412,     57,  1412,
 58,  1412,     59,  1930,     60,  1412,     61,  1412,     62,  1412,
 63,  1412,     64,  1412,     65,  1412,     66,  1412,     67,  1412,
 68,  1412,     69,  1412,     70,  1412,     71,  1412,     72,  1412,

 73,  1412,     74,  1412,     75,  1412,     76,  1412,     77,  1412,
 78,  1412,     79,  1412,     80,  1412,     81,  1412,     82,  1412,
 83,  1412,     84,  1412,     85,  1412,     86,  1412,     87,  1412,
 88,  1412,     89,  1412,     90,  1412,     91,  1412,     92,  1412,
 93,  1412,     94,  1412,     95,  1412,     96,  1412,     97,  1412,
 98,  1412,     99,  1412,    100,  1412,    101,  1412,    102,  1412,
103,  1412,    104,  1412,    105,  1412,    106,  1412,    107,  1412,
108,  1412,    109,  1412,    110,  1412,    111,  1412,    112,  1412,
113,  1412,    114,  1412,    115,  1412,    116,  1412,    117,  1412,
118,  1412,    119,  1412,    120,  1412,    121,  1412,    122,  1412,

123,  1412,    124,  1412,    125,  1412,    126,  1412,    127,  1412,
128,  1412,    129,  1412,    130,  1412,    131,  1412,    132,  1412,
133,  1412,    134,  1412,    135,  1412,    136,  1412,    137,  1412,
138,  1412,    139,  1412,    140,  1412,    141,  1412,    142,  1412,
143,  1412,    144,  1412,    145,  1412,    146,  1412,    147,  1412,
148,  1412,    149,  1412,    150,  1412,    151,  1412,    152,  1412,
153,  1412,    154,  1412,    155,  1412,    156,  1412,    157,  1412,
158,  1412,    159,  1412,    160,  1412,    161,  1412,    162,  1412,
163,  1412,    164,  1412,    165,  1412,    166,  1412,    167,  1412,
168,  1412,    169,  1412,    170,  1412,    171,  1412,    172,  1412,

173,  1412,    174,  1412,    175,  1412,    176,  1412,    177,  1412,
178,  1412,    179,  1412,    180,  1412,    181,  1412,    182,  1412,
183,  1412,    184,  1412,    185,  1412,    186,  1412,    187,  1412,
188,  1412,    189,  1412,    190,  1412,    191,  1412,    192,  1412,
193,  1412,    194,  1412,    195,  1412,    196,  1412,    197,  1412,
198,  1412,    199,  1412,    200,  1412,    201,  1412,    202,  1412,
203,  1412,    204,  1412,    205,  1412,    206,  1412,    207,  1412,
208,  1412,    209,  1412,    210,  1412,    211,  1412,    212,  1412,
213,  1412,    214,  1412,    215,  1412,    216,  1412,    217,  1412,
218,  1412,    219,  1412,    220,  1412,    221,  1412,    222,  1412,

223,  1412,    224,  1412,    225,  1412,    226,  1412,    227,  1412,
228,  1412,    229,  1412,    230,  1412,    231,  1412,    232,  1412,
233,  1412,    234,  1412,    235,  1412,    236,  1412,    237,  1412,
238,  1412,    239,  1412,    240,  1412,    241,  1412,    242,  1412,
243,  1412,    244,  1412,    245,  1412,    246,  1412,    247,  1412,
248,  1412,    249,  1412,    250,  1412,    251,  1412,    252,  1412,
253,  1412,    254,  1412,    255,  1412,    256,  1412,      0,     4,
  0,  5463,      1,  1674,      2,  1674,      3,  1674,      4,  1674,
  5,  1674,      6,  1674,      7,  1674,      8,  1674,      9,  1676,
 10,  1678,     11,  1674,     12,  1674,     13,  1674,     14,  1674,

 15,  1674,     16,  1674,     17,  1674,     18,  1674,     19,  1674,
 20,  1674,     21,  1674,     22,  1674,     23,  1674,     24,  1674,
 25,  1674,     26,  1674,     27,  1674,     28,  1674,     29,  1674,
 30,  1674,     31,  1674,     32,  1676,     33,  1674,     34,  1674,
 35,  1674,     36,  1674,     37,  1674,     38,  1674,     39,  1674,
 40,  1674,     41,  1674,     42,  1674,     43,  1674,     44,  1676,
 45,  1674,     46,  1674,     47,  1674,     48,  1682,     49,  1682,
 50,  1682,     51,  1682,     52,  1682,     53,  1682,     54,  1682,
 55,  1682,     56,  1682,     57,  1682,     58,  1674,     59,  1684,
 60,  1674,     61,  1674,     62,  1674,     63,  1674,     64,  1674,

 65,  1682,     66,  1682,     67,  1682,     68,  1682,     69,  1682,
 70,  1682,     71,  1682,     72,  1682,     73,  1682,     74,  1682,
 75,  1682,     76,  1682,     77,  1682,     78,  1682,     79,  1682,
 80,  1682,     81,  1682,     82,  1682,     83,  1682,     84,  1682,
 85,  1682,     86,  1682,     87,  1682,     88,  1682,     89,  1682,
 90,  1682,     91,  1674,     92,  1674,     93,  1674,     94,  1674,
 95,  1682,     96,  1674,     97,  1682,     98,  1682,     99,  1682,
100,  1682,    101,  1682,    102,  1682,    103,  1682,    104,  1682,
105,  1682,    106,  1682,    107,  1682,    108,  1682,    109,  1682,
110,  1682,    111,  1682,    112,  1682,    113,  1682,    114,  1682,

115,  1682,    116,  1682,    117,  1682,    118,  1682,    119,  1682,
120,  1682,    121,  1682,    122,  1682,    123,  1806,    124,  1674,
125,  1674,    126,  1674,    127,  1674,    128,  1674,    129,  1674,
130,  1674,    131,  1674,    132,  1674,    133,  1674,    134,  1674,
135,  1674,    136,  1674,    137,  1674,    138,  1674,    139,  1674,
140,  1674,    141,  1674,    142,  1674,    143,  1674,    144,  1674,
145,  1674,    146,  1674,    147,  1674,    148,  1674,    149,  1674,
150,  1674,    151,  1674,    152,  1674,    153,  1674,    154,  1674,
155,  1674,    156,  1674,    157,  1674,    158,  1674,    159,  1674,
160,  1674,    161,  1674,    162,  1674,    163,  1674,    164,  1674,

165,  1674,    166,  1674,    167,  1674,    168,  1674,    169,  1674,
170,  1674,    171,  1674,    172,  1674,    173,  1674,    174,  1674,
175,  1674,    176,  1674,    177,  1674,    178,  1674,    179,  1674,
180,  1674,    181,  1674,    182,  1674,    183,  1674,    184,  1674,
185,  1674,    186,  1674,    187,  1674,    188,  1674,    189,  1674,
190,  1674,    191,  1674,    192,  1674,    193,  1674,    194,  1674,
195,  1674,    196,  1674,    197,  1674,    198,  1674,    199,  1674,
200,  1674,    201,  1674,    202,  1674,    203,  1674,    204,  1674,
205,  1674,    206,  1674,    207,  1674,    208,  1674,    209,  1674,
210,  1674,    211,  1674,    212,  1674,    213,  1674,    214,  1674,

215,  1674,    216,  1674,    217,  1674,    218,  1674,    219,  1674,
220,  1674,    221,  1674,    222,  1674,    223,  1674,    224,  1674,
225,  1674,    226,  1674,    227,  1674,    228,  1674,    229,  1674,
230,  1674,    231,  1674,    232,  1674,    233,  1674,    234,  1674,
235,  1674,    236,  1674,    237,  1674,    238,  1674,    239,  1674,
240,  1674,    241,  1674,    242,  1674,    243,  1674,    244,  1674,
245,  1674,    246,  1674,    247,  1674,    248,  1674,    249,  1674,
250,  1674,    251,  1674,    252,  1674,    253,  1674,    254,  1674,
255,  1674,    256,  1674,      0,     4,      0,  5205,      1,  1416,
  2,  1416,      3,  1416,      4,  1416,      5,  1416,      6,  1416,

  7,  1416,      8,  1416,      9,  1418,     10,  1420,     11,  1416,
 12,  1416,     13,  1416,     14,  1416,     15,  1416,     16,  1416,
 17,  1416,     18,  1416,     19,  1416,     20,  1416,     21,  1416,
 22,  1416,     23,  1416,     24,  1416,     25,  1416,     26,  1416,
 27,  1416,     28,  1416,     29,  1416,     30,  1416,     31,  1416,
 32,  1418,     33,  1416,     34,  1416,     35,  1416,     36,  1416,
 37,  1416,     38,  1416,     39,  1416,     40,  1416,     41,  1416,
 42,  1416,     43,  1416,     44,  1418,     45,  1416,     46,  1416,
 47,  1416,     48,  1424,     49,  1424,     50,  1424,     51,  1424,
 52,  1424,     53,  1424,     54,  1424,     55,  1424,     56,  1424,

 57,  1424,     58,  1416,     59,  1426,     60,  1416,     61,  1416,
 62,  1416,     63,  1416,     64,  1416,     65,  1424,     66,  1424,
 67,  1424,     68,  1424,     69,  1424,     70,  1424,     71,  1424,
 72,  1424,     73,  1424,     74,  1424,     75,  1424,     76,  1424,
 77,  1424,     78,  1424,     79,  1424,     80,  1424,     81,  1424,
 82,  1424,     83,  1424,     84,  1424,     85,  1424,     86,  1424,
 87,  1424,     88,  1424,     89,  1424,     90,  1424,     91,  1416,
 92,  1416,     93,  1416,     94,  1416,     95,  1424,     96,  1416,
 97,  1424,     98,  1424,     99,  1424,    100,  1424,    101,  1424,
102,  1424,    103,  1424,    104,  1424,    105,  1424,    106,  1424,

107,  1424,    108,  1424,    109,  1424,    110,  1424,    111,  1424,
112,  1424,    113,  1424,    114,  1424,    115,  1424,    116,  1424,
117,  1424,    118,  1424,    119,  1424,    120,  1424,    121,  1424,
122,  1424,    123,  1548,    124,  1416,    125,  1416,    126,  1416,
127,  1416,    128,  1416,    129,  1416,    130,  1416,    131,  1416,
132,  1416,    133,  1416,    134,  1416,    135,  1416,    136,  1416,
137,  1416,    138,  1416,    139,  1416,    140,  1416,    141,  1416,
142,  1416,    143,  1416,    144,  1416,    145,  1416,    146,  1416,
147,  1416,    148,  1416,    149,  1416,    150,  1416,    151,  1416,
152,  1416,    153,  1416,    154,  1416,    155,  1416,    156,  1416,

157,  1416,    158,  1416,    159,  1416,    160,  1416,    161,  1416,
162,  1416,    163,  1416,    164,  1416,    165,  1416,    166,  1416,
167,  1416,    168,  1416,    169,  1416,    170,  1416,    171,  1416,
172,  1416,    173,  1416,    174,  1416,    175,  1416,    176,  1416,
177,  1416,    178,  1416,    179,  1416,    180,  1416,    181,  1416,
182,  1416,    183,  1416,    184,  1416,    185,  1416,    186,  1416,
187,  1416,    188,  1416,    189,  1416,    190,  1416,    191,  1416,
192,  1416,    193,  1416,    194,  1416,    195,  1416,    196,  1416,
197,  1416,    198,  1416,    199,  1416,    200,  1416,    201,  1416,
202,  1416,    203,  1416,    204,  1416,    205,  1416,    206,  1416,

207,  1416,    208,  1416,    209,  1416,    210,  1416,    211,  1416,
212,  1416,    213,  1416,    214,  1416,    215,  1416,    216,  1416,
217,  1416,    218,  1416,    219,  1416,    220,  1416,    221,  1416,
222,  1416,    223,  1416,    224,  1416,    225,  1416,    226,  1416,
227,  1416,    228,  1416,    229,  1416,    230,  1416,    231,  1416,
232,  1416,    233,  1416,    234,  1416,    235,  1416,    236,  1416,
237,  1416,    238,  1416,    239,  1416,    240,  1416,    241,  1416,
242,  1416,    243,  1416,    244,  1416,    245,  1416,    246,  1416,
247,  1416,    248,  1416,    249,  1416,    250,  1416,    251,  1416,
252,  1416,    253,  1416,    254,  1416,    255,  1416,    256,  1416,

  0,    59,      0,  4947,      0,    57,      0,  4945,      0,    58,
  0,  4943,      0,    59,      0,  4941,      0,    59,      0,  4939,
  0,     0,      0,     0,      9,  1173,      0,     0,      0,     0,
 12,  1173,      0,     0,      0,    55,      0,  4930,      0,    27,
  0,  4928,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 32,  1173,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     36,  1542,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,     36,  1614,
 48,  1565,     49,  1565,     50,  1565,     51,  1565,     52,  1565,
 53,  1565,     54,  1565,     55,  1565,     56,  1565,     57,  1565,
  0,     0,     48,  1614,     49,  1614,     50,  1614,     51,  1614,
 52,  1614,     53,  1614,     54,  1614,     55,  1614,     56,  1614,
 57,  1614,      0,     0,      0,     0,      0,     0,      0,     0,
 73,  1545,     61,  1537,     73,  1546,     65,  1614,     66,  1614,
 67,  1614,     68,  1614,     69,  1614,     70,  1614,     71,  1614,
 72,  1614,     73,  1614,     74,  1614,     75,  1614,     76,  1614,
 77,  1614,     78,  1614,     79,  1614,     80,  1614,     81,  1614,

 82,  1614,     83,  1614,     84,  1614,     85,  1614,     86,  1614,
 87,  1614,     88,  1614,     89,  1614,     90,  1614,      0,     0,
  0,     0,      0,     0,    105,  1545,     95,  1614,    105,  1546,
 97,  1614,     98,  1614,     99,  1614,    100,  1614,    101,  1614,
102,  1614,    103,  1614,    104,  1614,    105,  1614,    106,  1614,
107,  1614,    108,  1614,    109,  1614,    110,  1614,    111,  1614,
112,  1614,    113,  1614,    114,  1614,    115,  1614,    116,  1614,
117,  1614,    118,  1614,    119,  1614,    120,  1614,    121,  1614,
122,  1614,      0,    59,      0,  4806,      1,  1614,      2,  1614,
  3,  1614,      4,  1614,      5,  1614,      6,  1614,      7,  1614,

  8,  1614,      9,  1614,     10,  1614,     11,  1614,     12,  1614,
 13,  1614,     14,  1614,     15,  1614,     16,  1614,     17,  1614,
 18,  1614,     19,  1614,     20,  1614,     21,  1614,     22,  1614,
 23,  1614,     24,  1614,     25,  1614,     26,  1614,     27,  1614,
 28,  1614,     29,  1614,     30,  1614,     31,  1614,     32,  1614,
 33,  1614,     34,  1614,     35,  1614,     36,  1614,     37,  1614,
 38,  1614,     39,  1432,     40,  1614,     41,  1614,     42,  1614,
 43,  1614,     44,  1614,     45,  1614,     46,  1614,     47,  1614,
 48,  1614,     49,  1614,     50,  1614,     51,  1614,     52,  1614,
 53,  1614,     54,  1614,     55,  1614,     56,  1614,     57,  1614,

 58,  1614,     59,  1614,     60,  1614,     61,  1614,     62,  1614,
 63,  1614,     64,  1614,     65,  1614,     66,  1614,     67,  1614,
 68,  1614,     69,  1614,     70,  1614,     71,  1614,     72,  1614,
 73,  1614,     74,  1614,     75,  1614,     76,  1614,     77,  1614,
 78,  1614,     79,  1614,     80,  1614,     81,  1614,     82,  1614,
 83,  1614,     84,  1614,     85,  1614,     86,  1614,     87,  1614,
 88,  1614,     89,  1614,     90,  1614,     91,  1614,     92,  1614,
 93,  1614,     94,  1614,     95,  1614,     96,  1614,     97,  1614,
 98,  1614,     99,  1614,    100,  1614,    101,  1614,    102,  1614,
103,  1614,    104,  1614,    105,  1614,    106,  1614,    107,  1614,

108,  1614,    109,  1614,    110,  1614,    111,  1614,    112,  1614,
113,  1614,    114,  1614,    115,  1614,    116,  1614,    117,  1614,
118,  1614,    119,  1614,    120,  1614,    121,  1614,    122,  1614,
123,  1614,    124,  1614,    125,  1614,    126,  1614,    127,  1614,
128,  1614,    129,  1614,    130,  1614,    131,  1614,    132,  1614,
133,  1614,    134,  1614,    135,  1614,    136,  1614,    137,  1614,
138,  1614,    139,  1614,    140,  1614,    141,  1614,    142,  1614,
143,  1614,    144,  1614,    145,  1614,    146,  1614,    147,  1614,
148,  1614,    149,  1614,    150,  1614,    151,  1614,    152,  1614,
153,  1614,    154,  1614,    155,  1614,    156,  1614,    157,  1614,

158,  1614,    159,  1614,    160,  1614,    161,  1614,    162,  1614,
163,  1614,    164,  1614,    165,  1614,    166,  1614,    167,  1614,
168,  1614,    169,  1614,    170,  1614,    171,  1614,    172,  1614,
173,  1614,    174,  1614,    175,  1614,    176,  1614,    177,  1614,
178,  1614,    179,  1614,    180,  1614,    181,  1614,    182,  1614,
183,  1614,    184,  1614,    185,  1614,    186,  1614,    187,  1614,
188,  1614,    189,  1614,    190,  1614,    191,  1614,    192,  1614,
193,  1614,    194,  1614,    195,  1614,    196,  1614,    197,  1614,
198,  1614,    199,  1614,    200,  1614,    201,  1614,    202,  1614,
203,  1614,    204,  1614,    205,  1614,    206,  1614,    207,  1614,

208,  1614,    209,  1614,    210,  1614,    211,  1614,    212,  1614,
213,  1614,    214,  1614,    215,  1614,    216,  1614,    217,  1614,
218,  1614,    219,  1614,    220,  1614,    221,  1614,    222,  1614,
223,  1614,    224,  1614,    225,  1614,    226,  1614,    227,  1614,
228,  1614,    229,  1614,    230,  1614,    231,  1614,    232,  1614,
233,  1614,    234,  1614,    235,  1614,    236,  1614,    237,  1614,
238,  1614,    239,  1614,    240,  1614,    241,  1614,    242,  1614,
243,  1614,    244,  1614,    245,  1614,    246,  1614,    247,  1614,
248,  1614,    249,  1614,    250,  1614,    251,  1614,    252,  1614,
253,  1614,    254,  1614,    255,  1614,    256,  1614,      0,    16,

  0,  4548,      0,    17,      0,  4546,      0,    22,      0,  4544,
  0,    23,      0,  4542,      0,    38,      0,  4540,      0,    24,
  0,  4538,      0,    39,      0,  4536,      0,    41,      0,  4534,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,    45,
  0,  4523,      0,     0,      0,    54,      0,  4520,      0,    46,
  0,  4518,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     42,  1176,      0,     0,      0,     0,
  0,     0,     46,  1178,      0,     0,      0,     0,      0,    49,

  0,  4498,      0,    54,      0,  4496,     41,  1174,      0,    51,
  0,  4493,      0,     0,      0,     0,     46,  1176,      0,     0,
  0,    50,      0,  4487,      0,     0,     35,  1586,      0,     0,
 61,  1176,      0,     0,     61,  1176,      0,    42,      0,  4479,
  0,     0,     61,  1174,      0,    20,      0,  4475,     46,  1609,
 61,  1176,     48,  1645,     49,  1645,     50,  1645,     51,  1645,
 52,  1645,     53,  1645,     54,  1645,     55,  1645,     56,  1645,
 57,  1645,     61,  1169,     35,  1562,      0,    21,      0,  4459,
  0,    43,      0,  4457,      0,     0,      0,     0,     66,  1164,
  0,    15,      0,  4452,     69,  1670,     46,  1585,      0,     0,

 48,  1621,     49,  1621,     50,  1621,     51,  1621,     52,  1621,
 53,  1621,     54,  1621,     55,  1621,     56,  1621,     57,  1621,
 60,  1146,     61,  1185,     62,  1187,      0,     0,      0,    55,
  0,  4433,     88,  1682,      0,     0,     66,  1140,      0,     0,
  0,     0,     69,  1646,     61,  1178,     62,  1203,      0,     0,
  0,     0,     98,  1164,      0,     0,      0,     0,    101,  1670,
  0,     0,      0,     0,     36,  1530,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     42,  1532,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,    28,
  0,  4403,      0,    37,      0,  4401,    120,  1682,      0,     0,

 98,  1140,     36,  1117,      0,     0,    101,  1646,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     48,  1117,     49,  1117,
 50,  1117,     51,  1117,     52,  1117,     53,  1117,     54,  1117,
 55,  1117,     56,  1117,     57,  1117,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 65,  1117,     66,  1117,     67,  1117,     68,  1117,     69,  1117,
 70,  1117,     71,  1117,     72,  1117,     73,  1117,     74,  1117,
 75,  1117,     76,  1117,     77,  1117,     78,  1117,     79,  1117,
 80,  1117,     81,  1117,     82,  1117,     83,  1654,     84,  1117,

 85,  1117,     86,  1117,     87,  1117,     88,  1117,     89,  1117,
 90,  1117,     61,  1485,      0,     0,      0,     0,      0,     0,
 95,  1117,      0,     0,     97,  1117,     98,  1117,     99,  1117,
100,  1117,    101,  1117,    102,  1117,    103,  1117,    104,  1117,
105,  1117,    106,  1117,    107,  1117,    108,  1117,    109,  1117,
110,  1117,    111,  1117,    112,  1117,    113,  1117,    114,  1117,
115,  1654,    116,  1117,    117,  1117,    118,  1117,    119,  1117,
120,  1117,    121,  1117,    122,  1117,      0,    10,      0,  4309,
  1,  1654,      2,  1654,      3,  1654,      4,  1654,      5,  1654,
  6,  1654,      7,  1654,      8,  1654,      9,  1654,      0,     0,

 11,  1654,     12,  1654,     13,  1654,     14,  1654,     15,  1654,
 16,  1654,     17,  1654,     18,  1654,     19,  1654,     20,  1654,
 21,  1654,     22,  1654,     23,  1654,     24,  1654,     25,  1654,
 26,  1654,     27,  1654,     28,  1654,     29,  1654,     30,  1654,
 31,  1654,     32,  1654,     33,  1654,     34,  1654,     35,  1654,
 36,  1654,     37,  1654,     38,  1654,     39,  1654,     40,  1654,
 41,  1654,     42,  1654,     43,  1654,     44,  1654,     45,  1654,
 46,  1654,     47,  1654,     48,  1654,     49,  1654,     50,  1654,
 51,  1654,     52,  1654,     53,  1654,     54,  1654,     55,  1654,
 56,  1654,     57,  1654,     58,  1654,     59,  1402,     60,  1654,

 61,  1654,     62,  1654,     63,  1654,     64,  1654,     65,  1654,
 66,  1654,     67,  1654,     68,  1654,     69,  1654,     70,  1654,
 71,  1654,     72,  1654,     73,  1654,     74,  1654,     75,  1654,
 76,  1654,     77,  1654,     78,  1654,     79,  1654,     80,  1654,
 81,  1654,     82,  1654,     83,  1654,     84,  1654,     85,  1654,
 86,  1654,     87,  1654,     88,  1654,     89,  1654,     90,  1654,
 91,  1654,     92,  1654,     93,  1654,     94,  1654,     95,  1654,
 96,  1654,     97,  1654,     98,  1654,     99,  1654,    100,  1654,
101,  1654,    102,  1654,    103,  1654,    104,  1654,    105,  1654,
106,  1654,    107,  1654,    108,  1654,    109,  1654,    110,  1654,

111,  1654,    112,  1654,    113,  1654,    114,  1654,    115,  1654,
116,  1654,    117,  1654,    118,  1654,    119,  1654,    120,  1654,
121,  1654,    122,  1654,    123,  1654,    124,  1654,    125,  1654,
126,  1654,    127,  1654,    128,  1654,    129,  1654,    130,  1654,
131,  1654,    132,  1654,    133,  1654,    134,  1654,    135,  1654,
136,  1654,    137,  1654,    138,  1654,    139,  1654,    140,  1654,
141,  1654,    142,  1654,    143,  1654,    144,  1654,    145,  1654,
146,  1654,    147,  1654,    148,  1654,    149,  1654,    150,  1654,
151,  1654,    152,  1654,    153,  1654,    154,  1654,    155,  1654,
156,  1654,    157,  1654,    158,  1654,    159,  1654,    160,  1654,

161,  1654,    162,  1654,    163,  1654,    164,  1654,    165,  1654,
166,  1654,    167,  1654,    168,  1654,    169,  1654,    170,  1654,
171,  1654,    172,  1654,    173,  1654,    174,  1654,    175,  1654,
176,  1654,    177,  1654,    178,  1654,    179,  1654,    180,  1654,
181,  1654,    182,  1654,    183,  1654,    184,  1654,    185,  1654,
186,  1654,    187,  1654,    188,  1654,    189,  1654,    190,  1654,
191,  1654,    192,  1654,    193,  1654,    194,  1654,    195,  1654,
196,  1654,    197,  1654,    198,  1654,    199,  1654,    200,  1654,
201,  1654,    202,  1654,    203,  1654,    204,  1654,    205,  1654,
206,  1654,    207,  1654,    208,  1654,    209,  1654,    210,  1654,

211,  1654,    212,  1654,    213,  1654,    214,  1654,    215,  1654,
216,  1654,    217,  1654,    218,  1654,    219,  1654,    220,  1654,
221,  1654,    222,  1654,    223,  1654,    224,  1654,    225,  1654,
226,  1654,    227,  1654,    228,  1654,    229,  1654,    230,  1654,
231,  1654,    232,  1654,    233,  1654,    234,  1654,    235,  1654,
236,  1654,    237,  1654,    238,  1654,    239,  1654,    240,  1654,
241,  1654,    242,  1654,    243,  1654,    244,  1654,    245,  1654,
246,  1654,    247,  1654,    248,  1654,    249,  1654,    250,  1654,
251,  1654,    252,  1654,    253,  1654,    254,  1654,    255,  1654,
256,  1654,      0,     9,      0,  4051,      1,  1396,      2,  1396,

  3,  1396,      4,  1396,      5,  1396,      6,  1396,      7,  1396,
  8,  1396,      9,  1654,     10,  1146,     11,  1396,     12,  1396,
 13,  1396,     14,  1396,     15,  1396,     16,  1396,     17,  1396,
 18,  1396,     19,  1396,     20,  1396,     21,  1396,     22,  1396,
 23,  1396,     24,  1396,     25,  1396,     26,  1396,     27,  1396,
 28,  1396,     29,  1396,     30,  1396,     31,  1396,     32,  1654,
 33,  1396,     34,  1396,     35,  1396,     36,  1396,     37,  1396,
 38,  1396,     39,  1396,     40,  1396,     41,  1396,     42,  1396,
 43,  1396,     44,  1396,     45,  1396,     46,  1396,     47,  1396,
 48,  1396,     49,  1396,     50,  1396,     51,  1396,     52,  1396,

 53,  1396,     54,  1396,     55,  1396,     56,  1396,     57,  1396,
 58,  1396,     59,  1144,     60,  1396,     61,  1396,     62,  1396,
 63,  1396,     64,  1396,     65,  1396,     66,  1396,     67,  1396,
 68,  1396,     69,  1396,     70,  1396,     71,  1396,     72,  1396,
 73,  1396,     74,  1396,     75,  1396,     76,  1396,     77,  1396,
 78,  1396,     79,  1396,     80,  1396,     81,  1396,     82,  1396,
 83,  1396,     84,  1396,     85,  1396,     86,  1396,     87,  1396,
 88,  1396,     89,  1396,     90,  1396,     91,  1396,     92,  1396,
 93,  1396,     94,  1396,     95,  1396,     96,  1396,     97,  1396,
 98,  1396,     99,  1396,    100,  1396,    101,  1396,    102,  1396,

103,  1396,    104,  1396,    105,  1396,    106,  1396,    107,  1396,
108,  1396,    109,  1396,    110,  1396,    111,  1396,    112,  1396,
113,  1396,    114,  1396,    115,  1396,    116,  1396,    117,  1396,
118,  1396,    119,  1396,    120,  1396,    121,  1396,    122,  1396,
123,  1396,    124,  1396,    125,  1396,    126,  1396,    127,  1396,
128,  1396,    129,  1396,    130,  1396,    131,  1396,    132,  1396,
133,  1396,    134,  1396,    135,  1396,    136,  1396,    137,  1396,
138,  1396,    139,  1396,    140,  1396,    141,  1396,    142,  1396,
143,  1396,    144,  1396,    145,  1396,    146,  1396,    147,  1396,
148,  1396,    149,  1396,    150,  1396,    151,  1396,    152,  1396,

153,  1396,    154,  1396,    155,  1396,    156,  1396,    157,  1396,
158,  1396,    159,  1396,    160,  1396,    161,  1396,    162,  1396,
163,  1396,    164,  1396,    165,  1396,    166,  1396,    167,  1396,
168,  1396,    169,  1396,    170,  1396,    171,  1396,    172,  1396,
173,  1396,    174,  1396,    175,  1396,    176,  1396,    177,  1396,
178,  1396,    179,  1396,    180,  1396,    181,  1396,    182,  1396,
183,  1396,    184,  1396,    185,  1396,    186,  1396,    187,  1396,
188,  1396,    189,  1396,    190,  1396,    191,  1396,    192,  1396,
193,  1396,    194,  1396,    195,  1396,    196,  1396,    197,  1396,
198,  1396,    199,  1396,    200,  1396,    201,  1396,    202,  1396,

203,  1396,    204,  1396,    205,  1396,    206,  1396,    207,  1396,
208,  1396,    209,  1396,    210,  1396,    211,  1396,    212,  1396,
213,  1396,    214,  1396,    215,  1396,    216,  1396,    217,  1396,
218,  1396,    219,  1396,    220,  1396,    221,  1396,    222,  1396,
223,  1396,    224,  1396,    225,  1396,    226,  1396,    227,  1396,
228,  1396,    229,  1396,    230,  1396,    231,  1396,    232,  1396,
233,  1396,    234,  1396,    235,  1396,    236,  1396,    237,  1396,
238,  1396,    239,  1396,    240,  1396,    241,  1396,    242,  1396,
243,  1396,    244,  1396,    245,  1396,    246,  1396,    247,  1396,
248,  1396,    249,  1396,    250,  1396,    251,  1396,    252,  1396,

253,  1396,    254,  1396,    255,  1396,    256,  1396,      0,     9,
  0,  3793,      0,    11,      0,  3791,      0,     8,      0,  3789,
  0,     4,      0,  3787,      0,     4,      0,  3785,      9,   888,
 10,   888,      0,     6,      0,  3781,      0,     7,      0,  3779,
  9,  1022,     10,  1022,      9,  1020,     10,  1020,      0,     0,
  0,    57,      0,  3772,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  9,     0,      0,     0,     32,   888,     12,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     32,  1022,      0,     0,
 32,  1020,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 44,  1022,      0,     0,     44,  1020,     32,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 48,  1642,     49,  1642,     50,  1642,     51,  1642,     52,  1642,
 53,  1642,     54,  1642,     55,  1642,     56,  1642,     57,  1642,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     65,  1642,     66,  1642,     67,  1642,
 68,  1642,     69,  1642,     70,  1642,     71,  1642,     72,  1642,
 73,  1642,     74,  1642,     75,  1642,     76,  1642,     77,  1642,
 78,  1642,     79,  1642,     80,  1642,     81,  1642,     82,  1642,

 83,  1642,     84,  1642,     85,  1642,     86,  1642,     87,  1642,
 88,  1642,     89,  1642,     90,  1642,      0,     0,      0,     0,
  0,     0,      0,     0,     95,  1642,      0,     0,     97,  1642,
 98,  1642,     99,  1642,    100,  1642,    101,  1642,    102,  1642,
103,  1642,    104,  1642,    105,  1642,    106,  1642,    107,  1642,
108,  1642,    109,  1642,    110,  1642,    111,  1642,    112,  1642,
113,  1642,    114,  1642,    115,  1642,    116,  1642,    117,  1642,
118,  1642,    119,  1642,    120,  1642,    121,  1642,    122,  1642,
  0,     8,      0,  3657,      1,  1642,      2,  1642,      3,  1642,
  4,  1642,      5,  1642,      6,  1642,      7,  1642,      8,  1642,

  9,  1642,     10,  1642,     11,  1642,     12,  1642,     13,  1642,
 14,  1642,     15,  1642,     16,  1642,     17,  1642,     18,  1642,
 19,  1642,     20,  1642,     21,  1642,     22,  1642,     23,  1642,
 24,  1642,     25,  1642,     26,  1642,     27,  1642,     28,  1642,
 29,  1642,     30,  1642,     31,  1642,     32,  1642,     33,  1642,
 34,  1642,     35,  1642,     36,  1642,     37,  1642,     38,  1642,
 39,  1642,     40,  1642,     41,  1642,     42,  1642,     43,  1642,
 44,  1642,     45,  1642,     46,  1642,     47,  1642,     48,  1642,
 49,  1642,     50,  1642,     51,  1642,     52,  1642,     53,  1642,
 54,  1642,     55,  1642,     56,  1642,     57,  1642,     58,  1642,

 59,  1642,     60,  1642,     61,  1642,     62,  1642,     63,  1642,
 64,  1642,     65,  1642,     66,  1642,     67,  1642,     68,  1642,
 69,  1642,     70,  1642,     71,  1642,     72,  1642,     73,  1642,
 74,  1642,     75,  1642,     76,  1642,     77,  1642,     78,  1642,
 79,  1642,     80,  1642,     81,  1642,     82,  1642,     83,  1642,
 84,  1642,     85,  1642,     86,  1642,     87,  1642,     88,  1642,
 89,  1642,     90,  1642,     91,  1642,     92,  1642,     93,  1642,
 94,  1642,     95,  1642,     96,  1642,     97,  1642,     98,  1642,
 99,  1642,    100,  1642,    101,  1642,    102,  1642,    103,  1642,
104,  1642,    105,  1642,    106,  1642,    107,  1642,    108,  1642,

109,  1642,    110,  1642,    111,  1642,    112,  1642,    113,  1642,
114,  1642,    115,  1642,    116,  1642,    117,  1642,    118,  1642,
119,  1642,    120,  1642,    121,  1642,    122,  1642,    123,  1642,
124,  1642,    125,   894,    126,  1642,    127,  1642,    128,  1642,
129,  1642,    130,  1642,    131,  1642,    132,  1642,    133,  1642,
134,  1642,    135,  1642,    136,  1642,    137,  1642,    138,  1642,
139,  1642,    140,  1642,    141,  1642,    142,  1642,    143,  1642,
144,  1642,    145,  1642,    146,  1642,    147,  1642,    148,  1642,
149,  1642,    150,  1642,    151,  1642,    152,  1642,    153,  1642,
154,  1642,    155,  1642,    156,  1642,    157,  1642,    158,  1642,

159,  1642,    160,  1642,    161,  1642,    162,  1642,    163,  1642,
164,  1642,    165,  1642,    166,  1642,    167,  1642,    168,  1642,
169,  1642,    170,  1642,    171,  1642,    172,  1642,    173,  1642,
174,  1642,    175,  1642,    176,  1642,    177,  1642,    178,  1642,
179,  1642,    180,  1642,    181,  1642,    182,  1642,    183,  1642,
184,  1642,    185,  1642,    186,  1642,    187,  1642,    188,  1642,
189,  1642,    190,  1642,    191,  1642,    192,  1642,    193,  1642,
194,  1642,    195,  1642,    196,  1642,    197,  1642,    198,  1642,
199,  1642,    200,  1642,    201,  1642,    202,  1642,    203,  1642,
204,  1642,    205,  1642,    206,  1642,    207,  1642,    208,  1642,

209,  1642,    210,  1642,    211,  1642,    212,  1642,    213,  1642,
214,  1642,    215,  1642,    216,  1642,    217,  1642,    218,  1642,
219,  1642,    220,  1642,    221,  1642,    222,  1642,    223,  1642,
224,  1642,    225,  1642,    226,  1642,    227,  1642,    228,  1642,
229,  1642,    230,  1642,    231,  1642,    232,  1642,    233,  1642,
234,  1642,    235,  1642,    236,  1642,    237,  1642,    238,  1642,
239,  1642,    240,  1642,    241,  1642,    242,  1642,    243,  1642,
244,  1642,    245,  1642,    246,  1642,    247,  1642,    248,  1642,
249,  1642,    250,  1642,    251,  1642,    252,  1642,    253,  1642,
254,  1642,    255,  1642,    256,  1642,      0,     0,      0,  3399,

  0,     0,      0,     0,      0,  3396,      0,     0,      0,     0,
  0,  3393,      0,    34,      0,  3391,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,    56,      0,  3376,      0,    56,      0,  3374,
  0,    13,      0,  3372,      0,    18,      0,  3370,      0,    29,
  0,  3368,      0,    30,      0,  3366,      0,    31,      0,  3364,
  0,    19,      0,  3362,      0,    40,      0,  3360,      0,    36,
  0,  3358,      0,    54,      0,  3356,      0,    44,      0,  3354,
  0,    26,      0,  3352,     48,  1642,     49,  1642,     50,  1642,

 51,  1642,     52,  1642,     53,  1642,     54,  1642,     55,  1642,
 56,  1642,     57,  1642,     35,  1642,      0,     0,     35,  1640,
  0,     0,     39,  1723,      0,     0,     39,  2082,     65,  1642,
 66,  1642,     67,  1642,     68,  1642,     69,  1642,     70,  1642,
 48,     0,     49,     0,     50,     0,     51,     0,     52,     0,
 53,     0,     54,     0,     55,     0,     56,     0,     57,     0,
 78,  2001,      0,    55,      0,  3316,     78,  2000,      0,    47,
  0,  3313,      0,    52,      0,  3311,      0,    48,      0,  3309,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,     97,  1642,     98,  1642,     99,  1642,    100,  1642,

101,  1642,    102,  1642,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     61,  1961,      0,     0,      0,     0,
  0,     0,      0,     0,    110,  2001,      0,    25,      0,  3284,
110,  2000,      0,     0,      0,     0,     36,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 48,     0,     49,     0,     50,     0,     51,     0,     52,     0,
 53,     0,     54,     0,     55,     0,     56,     0,     57,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     65,     0,     66,     0,     67,     0,

 68,     0,     69,     0,     70,     0,     71,     0,     72,     0,
 73,     0,     74,     0,     75,     0,     76,     0,     77,     0,
 78,     0,     79,     0,     80,     0,     81,     0,     82,     0,
 83,     0,     84,     0,     85,     0,     86,     0,     87,     0,
 88,     0,     89,     0,     90,     0,      0,     0,      0,     0,
 61,  1895,      0,     0,     95,     0,      0,     0,     97,     0,
 98,     0,     99,     0,    100,     0,    101,     0,    102,     0,
103,     0,    104,     0,    105,     0,    106,     0,    107,     0,
108,     0,    109,     0,    110,     0,    111,     0,    112,     0,
113,     0,    114,     0,    115,     0,    116,     0,    117,     0,

118,     0,    119,     0,    120,     0,    121,     0,    122,     0,
  0,     0,      0,  3192,      1,     0,      2,     0,      3,     0,
  4,     0,      5,     0,      6,     0,      7,     0,      8,     0,
  9,     0,     10,     0,     11,     0,     12,     0,     13,     0,
 14,     0,     15,     0,     16,     0,     17,     0,     18,     0,
 19,     0,     20,     0,     21,     0,     22,     0,     23,     0,
 24,     0,     25,     0,     26,     0,     27,     0,     28,     0,
 29,     0,     30,     0,     31,     0,     32,     0,     33,     0,
 34,     0,     35,     0,     36,     0,     37,     0,     38,     0,
 39,  -182,     40,     0,     41,     0,     42,     0,     43,     0,

 44,     0,     45,     0,     46,     0,     47,     0,     48,     0,
 49,     0,     50,     0,     51,     0,     52,     0,     53,     0,
 54,     0,     55,     0,     56,     0,     57,     0,     58,     0,
 59,     0,     60,     0,     61,     0,     62,     0,     63,     0,
 64,     0,     65,     0,     66,     0,     67,     0,     68,     0,
 69,     0,     70,     0,     71,     0,     72,     0,     73,     0,
 74,     0,     75,     0,     76,     0,     77,     0,     78,     0,
 79,     0,     80,     0,     81,     0,     82,     0,     83,     0,
 84,     0,     85,     0,     86,     0,     87,     0,     88,     0,
 89,     0,     90,     0,     91,     0,     92,     0,     93,     0,

 94,     0,     95,     0,     96,     0,     97,     0,     98,     0,
 99,     0,    100,     0,    101,     0,    102,     0,    103,     0,
104,     0,    105,     0,    106,     0,    107,     0,    108,     0,
109,     0,    110,     0,    111,     0,    112,     0,    113,     0,
114,     0,    115,     0,    116,     0,    117,     0,    118,     0,
119,     0,    120,     0,    121,     0,    122,     0,    123,     0,
124,     0,    125,     0,    126,     0,    127,     0,    128,     0,
129,     0,    130,     0,    131,     0,    132,     0,    133,     0,
134,     0,    135,     0,    136,     0,    137,     0,    138,     0,
139,     0,    140,     0,    141,     0,    142,     0,    143,     0,

144,     0,    145,     0,    146,     0,    147,     0,    148,     0,
149,     0,    150,     0,    151,     0,    152,     0,    153,     0,
154,     0,    155,     0,    156,     0,    157,     0,    158,     0,
159,     0,    160,     0,    161,     0,    162,     0,    163,     0,
164,     0,    165,     0,    166,     0,    167,     0,    168,     0,
169,     0,    170,     0,    171,     0,    172,     0,    173,     0,
174,     0,    175,     0,    176,     0,    177,     0,    178,     0,
179,     0,    180,     0,    181,     0,    182,     0,    183,     0,
184,     0,    185,     0,    186,     0,    187,     0,    188,     0,
189,     0,    190,     0,    191,     0,    192,     0,    193,     0,

194,     0,    195,     0,    196,     0,    197,     0,    198,     0,
199,     0,    200,     0,    201,     0,    202,     0,    203,     0,
204,     0,    205,     0,    206,     0,    207,     0,    208,     0,
209,     0,    210,     0,    211,     0,    212,     0,    213,     0,
214,     0,    215,     0,    216,     0,    217,     0,    218,     0,
219,     0,    220,     0,    221,     0,    222,     0,    223,     0,
224,     0,    225,     0,    226,     0,    227,     0,    228,     0,
229,     0,    230,     0,    231,     0,    232,     0,    233,     0,
234,     0,    235,     0,    236,     0,    237,     0,    238,     0,
239,     0,    240,     0,    241,     0,    242,     0,    243,     0,

244,     0,    245,     0,    246,     0,    247,     0,    248,     0,
249,     0,    250,     0,    251,     0,    252,     0,    253,     0,
254,     0,    255,     0,    256,     0,      0,     0,      0,  2934,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,  2922,      0,    14,      0,  2920,      0,    35,
  0,  2918,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,  2911,      0,     0,      0,     0,
  0,    10,      0,  2907,      0,     9,      0,  2905,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      9,     0,     10,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     48,  1900,     49,  1900,     50,  1900,
 51,  1900,     52,  1900,     53,  1900,     54,  1900,     55,  1900,
 56,  1900,     57,  1900,      0,    54,      0,  2875,      0,     0,
 32,     0,      0,     0,      0,     0,      0,     0,     65,  1900,
 66,  1900,     67,  1900,     68,  1900,     69,  1900,     70,  1900,
 48,  1900,     49,  1900,     50,  1900,     51,  1900,     52,  1900,
 53,  1900,     54,  1900,     55,  1900,     56,  1900,     57,  1900,
  0,     0,      0,     0,      0,     0,      0,  2850,     73,  2168,

 59,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     35,   -59,      0,     0,
  0,  2838,     97,  1900,     98,  1900,     99,  1900,    100,  1900,
101,  1900,    102,  1900,      0,     0,      0,     0,     46,   -36,
  0,     0,     48,  1900,     49,  1900,     50,  1900,     51,  1900,
 52,  1900,     53,  1900,     54,  1900,     55,  1900,     56,  1900,
 57,  1900,    105,  2168,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,     66,  -481,
  0,     0,     43,  1898,     69,    25,     45,  1898,      0,     0,
  0,     0,     48,  1910,     49,  1910,     50,  1910,     51,  1910,

 52,  1910,     53,  1910,     54,  1910,     55,  1910,     56,  1910,
 57,  1910,      0,     0,      0,     0,     48,  1922,     49,  1922,
 50,  1922,     51,  1922,     52,  1922,     53,  1922,     54,  1922,
 55,  1922,     56,  1922,     57,  1922,      0,    55,      0,  2779,
  0,     0,     98,  -481,      0,     0,      0,     0,    101,    25,
 65,  1922,     66,  1922,     67,  1922,     68,  1922,     69,  1922,
 70,  1922,      0,     0,      0,     4,      0,  2765,      0,     5,
  0,  2763,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      9,     0,     10,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 36,  -537,      0,     0,     97,  1922,     98,  1922,     99,  1922,
100,  1922,    101,  1922,    102,  1922,      0,     0,      0,     0,
 32,     0,      0,     0,     48,  -537,     49,  -537,     50,  -537,
 51,  -537,     52,  -537,     53,  -537,     54,  -537,     55,  -537,
 56,  -537,     57,  -537,     44,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,     65,  -537,
 66,  -537,     67,  -537,     68,  -537,     69,  1901,     70,  -537,
 71,  -537,     72,  -537,     73,  -537,     74,  -537,     75,  -537,
 76,  -537,     77,  -537,     78,  -537,     79,  -537,     80,  -537,

 81,  -537,     82,  -537,     83,  -537,     84,  -537,     85,  -537,
 86,  -537,     87,  -537,     88,  -537,     89,  -537,     90,  -537,
  0,     0,      0,     0,      0,     0,      0,     0,     95,  -537,
  0,     0,     97,  -537,     98,  -537,     99,  -537,    100,  -537,
101,  1901,    102,  -537,    103,  -537,    104,  -537,    105,  -537,
106,  -537,    107,  -537,    108,  -537,    109,  -537,    110,  -537,
111,  -537,    112,  -537,    113,  -537,    114,  -537,    115,  -537,
116,  -537,    117,  -537,    118,  -537,    119,  -537,    120,  -537,
121,  -537,    122,  -537,      0,    10,      0,  2655,      1,     0,
  2,     0,      3,     0,      4,     0,      5,     0,      6,     0,

  7,     0,      8,     0,      9,     0,      0,     0,     11,     0,
 12,     0,     13,     0,     14,     0,     15,     0,     16,     0,
 17,     0,     18,     0,     19,     0,     20,     0,     21,     0,
 22,     0,     23,     0,     24,     0,     25,     0,     26,     0,
 27,     0,     28,     0,     29,     0,     30,     0,     31,     0,
 32,     0,     33,     0,     34,     0,     35,     0,     36,     0,
 37,     0,     38,     0,     39,     0,     40,     0,     41,     0,
 42,     0,     43,     0,     44,     0,     45,     0,     46,     0,
 47,     0,     48,     0,     49,     0,     50,     0,     51,     0,
 52,     0,     53,     0,     54,     0,     55,     0,     56,     0,

 57,     0,     58,     0,     59,  -252,     60,     0,     61,     0,
 62,     0,     63,     0,     64,     0,     65,     0,     66,     0,
 67,     0,     68,     0,     69,     0,     70,     0,     71,     0,
 72,     0,     73,     0,     74,     0,     75,     0,     76,     0,
 77,     0,     78,     0,     79,     0,     80,     0,     81,     0,
 82,     0,     83,     0,     84,     0,     85,     0,     86,     0,
 87,     0,     88,     0,     89,     0,     90,     0,     91,     0,
 92,     0,     93,     0,     94,     0,     95,     0,     96,     0,
 97,     0,     98,     0,     99,     0,    100,     0,    101,     0,
102,     0,    103,     0,    104,     0,    105,     0,    106,     0,

107,     0,    108,     0,    109,     0,    110,     0,    111,     0,
112,     0,    113,     0,    114,     0,    115,     0,    116,     0,
117,     0,    118,     0,    119,     0,    120,     0,    121,     0,
122,     0,    123,     0,    124,     0,    125,     0,    126,     0,
127,     0,    128,     0,    129,     0,    130,     0,    131,     0,
132,     0,    133,     0,    134,     0,    135,     0,    136,     0,
137,     0,    138,     0,    139,     0,    140,     0,    141,     0,
142,     0,    143,     0,    144,     0,    145,     0,    146,     0,
147,     0,    148,     0,    149,     0,    150,     0,    151,     0,
152,     0,    153,     0,    154,     0,    155,     0,    156,     0,

157,     0,    158,     0,    159,     0,    160,     0,    161,     0,
162,     0,    163,     0,    164,     0,    165,     0,    166,     0,
167,     0,    168,     0,    169,     0,    170,     0,    171,     0,
172,     0,    173,     0,    174,     0,    175,     0,    176,     0,
177,     0,    178,     0,    179,     0,    180,     0,    181,     0,
182,     0,    183,     0,    184,     0,    185,     0,    186,     0,
187,     0,    188,     0,    189,     0,    190,     0,    191,     0,
192,     0,    193,     0,    194,     0,    195,     0,    196,     0,
197,     0,    198,     0,    199,     0,    200,     0,    201,     0,
202,     0,    203,     0,    204,     0,    205,     0,    206,     0,

207,     0,    208,     0,    209,     0,    210,     0,    211,     0,
212,     0,    213,     0,    214,     0,    215,     0,    216,     0,
217,     0,    218,     0,    219,     0,    220,     0,    221,     0,
222,     0,    223,     0,    224,     0,    225,     0,    226,     0,
227,     0,    228,     0,    229,     0,    230,     0,    231,     0,
232,     0,    233,     0,    234,     0,    235,     0,    236,     0,
237,     0,    238,     0,    239,     0,    240,     0,    241,     0,
242,     0,    243,     0,    244,     0,    245,     0,    246,     0,
247,     0,    248,     0,    249,     0,    250,     0,    251,     0,
252,     0,    253,     0,    254,     0,    255,     0,    256,     0,

  0,     9,      0,  2397,      1,  -258,      2,  -258,      3,  -258,
  4,  -258,      5,  -258,      6,  -258,      7,  -258,      8,  -258,
  9,     0,     10,  -508,     11,  -258,     12,  -258,     13,  -258,
 14,  -258,     15,  -258,     16,  -258,     17,  -258,     18,  -258,
 19,  -258,     20,  -258,     21,  -258,     22,  -258,     23,  -258,
 24,  -258,     25,  -258,     26,  -258,     27,  -258,     28,  -258,
 29,  -258,     30,  -258,     31,  -258,     32,     0,     33,  -258,
 34,  -258,     35,  -258,     36,  -258,     37,  -258,     38,  -258,
 39,  -258,     40,  -258,     41,  -258,     42,  -258,     43,  -258,
 44,  -258,     45,  -258,     46,  -258,     47,  -258,     48,  -258,

 49,  -258,     50,  -258,     51,  -258,     52,  -258,     53,  -258,
 54,  -258,     55,  -258,     56,  -258,     57,  -258,     58,  -258,
 59,  -510,     60,  -258,     61,  -258,     62,  -258,     63,  -258,
 64,  -258,     65,  -258,     66,  -258,     67,  -258,     68,  -258,
 69,  -258,     70,  -258,     71,  -258,     72,  -258,     73,  -258,
 74,  -258,     75,  -258,     76,  -258,     77,  -258,     78,  -258,
 79,  -258,     80,  -258,     81,  -258,     82,  -258,     83,  -258,
 84,  -258,     85,  -258,     86,  -258,     87,  -258,     88,  -258,
 89,  -258,     90,  -258,     91,  -258,     92,  -258,     93,  -258,
 94,  -258,     95,  -258,     96,  -258,     97,  -258,     98,  -258,

 99,  -258,    100,  -258,    101,  -258,    102,  -258,    103,  -258,
104,  -258,    105,  -258,    106,  -258,    107,  -258,    108,  -258,
109,  -258,    110,  -258,    111,  -258,    112,  -258,    113,  -258,
114,  -258,    115,  -258,    116,  -258,    117,  -258,    118,  -258,
119,  -258,    120,  -258,    121,  -258,    122,  -258,    123,  -258,
124,  -258,    125,  -258,    126,  -258,    127,  -258,    128,  -258,
129,  -258,    130,  -258,    131,  -258,    132,  -258,    133,  -258,
134,  -258,    135,  -258,    136,  -258,    137,  -258,    138,  -258,
139,  -258,    140,  -258,    141,  -258,    142,  -258,    143,  -258,
144,  -258,    145,  -258,    146,  -258,    147,  -258,    148,  -258,

149,  -258,    150,  -258,    151,  -258,    152,  -258,    153,  -258,
154,  -258,    155,  -258,    156,  -258,    157,  -258,    158,  -258,
159,  -258,    160,  -258,    161,  -258,    162,  -258,    163,  -258,
164,  -258,    165,  -258,    166,  -258,    167,  -258,    168,  -258,
169,  -258,    170,  -258,    171,  -258,    172,  -258,    173,  -258,
174,  -258,    175,  -258,    176,  -258,    177,  -258,    178,  -258,
179,  -258,    180,  -258,    181,  -258,    182,  -258,    183,  -258,
184,  -258,    185,  -258,    186,  -258,    187,  -258,    188,  -258,
189,  -258,    190,  -258,    191,  -258,    192,  -258,    193,  -258,
194,  -258,    195,  -258,    196,  -258,    197,  -258,    198,  -258,

199,  -258,    200,  -258,    201,  -258,    202,  -258,    203,  -258,
204,  -258,    205,  -258,    206,  -258,    207,  -258,    208,  -258,
209,  -258,    210,  -258,    211,  -258,    212,  -258,    213,  -258,
214,  -258,    215,  -258,    216,  -258,    217,  -258,    218,  -258,
219,  -258,    220,  -258,    221,  -258,    222,  -258,    223,  -258,
224,  -258,    225,  -258,    226,  -258,    227,  -258,    228,  -258,
229,  -258,    230,  -258,    231,  -258,    232,  -258,    233,  -258,
234,  -258,    235,  -258,    236,  -258,    237,  -258,    238,  -258,
239,  -258,    240,  -258,    241,  -258,    242,  -258,    243,  -258,
244,  -258,    245,  -258,    246,  -258,    247,  -258,    248,  -258,

249,  -258,    250,  -258,    251,  -258,    252,  -258,    253,  -258,
254,  -258,    255,  -258,    256,  -258,      0,     6,      0,  2139,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     48,     0,     49,     0,     50,     0,
 51,     0,     52,     0,     53,     0,     54,     0,     55,     0,
 56,     0,     57,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,     65,     0,
 66,     0,     67,     0,     68,     0,     69,     0,     70,     0,
 71,     0,     72,     0,     73,     0,     74,     0,     75,     0,
 76,     0,     77,     0,     78,     0,     79,     0,     80,     0,
 81,     0,     82,     0,     83,     0,     84,     0,     85,     0,
 86,     0,     87,     0,     88,     0,     89,     0,     90,     0,

  0,     0,      0,     0,      0,     0,      0,     0,     95,     0,
  0,     0,     97,     0,     98,     0,     99,     0,    100,     0,
101,     0,    102,     0,    103,     0,    104,     0,    105,     0,
106,     0,    107,     0,    108,     0,    109,     0,    110,     0,
111,     0,    112,     0,    113,     0,    114,     0,    115,     0,
116,     0,    117,     0,    118,     0,    119,     0,    120,     0,
121,     0,    122,     0,      0,     0,      0,  2015,      1,     0,
  2,     0,      3,     0,      4,     0,      5,     0,      6,     0,
  7,     0,      8,     0,      9,     0,     10,     0,     11,     0,
 12,     0,     13,     0,     14,     0,     15,     0,     16,     0,

 17,     0,     18,     0,     19,     0,     20,     0,     21,     0,
 22,     0,     23,     0,     24,     0,     25,     0,     26,     0,
 27,     0,     28,     0,     29,     0,     30,     0,     31,     0,
 32,     0,     33,     0,     34,     0,     35,     0,     36,     0,
 37,     0,     38,     0,     39,     0,     40,     0,     41,     0,
 42,     0,     43,     0,     44,     0,     45,     0,     46,     0,
 47,     0,     48,     0,     49,     0,     50,     0,     51,     0,
 52,     0,     53,     0,     54,     0,     55,     0,     56,     0,
 57,     0,     58,     0,     59,     0,     60,     0,     61,     0,
 62,     0,     63,     0,     64,     0,     65,     0,     66,     0,

 67,     0,     68,     0,     69,     0,     70,     0,     71,     0,
 72,     0,     73,     0,     74,     0,     75,     0,     76,     0,
 77,     0,     78,     0,     79,     0,     80,     0,     81,     0,
 82,     0,     83,     0,     84,     0,     85,     0,     86,     0,
 87,     0,     88,     0,     89,     0,     90,     0,     91,     0,
 92,     0,     93,     0,     94,     0,     95,     0,     96,     0,
 97,     0,     98,     0,     99,     0,    100,     0,    101,     0,
102,     0,    103,     0,    104,     0,    105,     0,    106,     0,
107,     0,    108,     0,    109,     0,    110,     0,    111,     0,
112,     0,    113,     0,    114,     0,    115,     0,    116,     0,

117,     0,    118,     0,    119,     0,    120,     0,    121,     0,
122,     0,    123,     0,    124,     0,    125,  -748,    126,     0,
127,     0,    128,     0,    129,     0,    130,     0,    131,     0,
132,     0,    133,     0,    134,     0,    135,     0,    136,     0,
137,     0,    138,     0,    139,     0,    140,     0,    141,     0,
142,     0,    143,     0,    144,     0,    145,     0,    146,     0,
147,     0,    148,     0,    149,     0,    150,     0,    151,     0,
152,     0,    153,     0,    154,     0,    155,     0,    156,     0,
157,     0,    158,     0,    159,     0,    160,     0,    161,     0,
162,     0,    163,     0,    164,     0,    165,     0,    166,     0,

167,     0,    168,     0,    169,     0,    170,     0,    171,     0,
172,     0,    173,     0,    174,     0,    175,     0,    176,     0,
177,     0,    178,     0,    179,     0,    180,     0,    181,     0,
182,     0,    183,     0,    184,     0,    185,     0,    186,     0,
187,     0,    188,     0,    189,     0,    190,     0,    191,     0,
192,     0,    193,     0,    194,     0,    195,     0,    196,     0,
197,     0,    198,     0,    199,     0,    200,     0,    201,     0,
202,     0,    203,     0,    204,     0,    205,     0,    206,     0,
207,     0,    208,     0,    209,     0,    210,     0,    211,     0,
212,     0,    213,     0,    214,     0,    215,     0,    216,     0,

217,     0,    218,     0,    219,     0,    220,     0,    221,     0,
222,     0,    223,     0,    224,     0,    225,     0,    226,     0,
227,     0,    228,     0,    229,     0,    230,     0,    231,     0,
232,     0,    233,     0,    234,     0,    235,     0,    236,     0,
237,     0,    238,     0,    239,     0,    240,     0,    241,     0,
242,     0,    243,     0,    244,     0,    245,     0,    246,     0,
247,     0,    248,     0,    249,     0,    250,     0,    251,     0,
252,     0,    253,     0,    254,     0,    255,     0,    256,     0,
  0,    56,      0,  1757,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,  1734,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,     35,    23,      0,     0,      0,     0,      0,     0,
 39,   104,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,     48,     0,
 49,     0,     50,     0,     51,     0,     52,     0,     53,     0,
 54,     0,     55,     0,     56,     0,     57,     0,      0,     0,

 36, -1665,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,     65,     0,     66,     0,     67,     0,     68,     0,
 69,     0,     70,     0,     48, -1642,     49, -1642,     50, -1642,
 51, -1642,     52, -1642,     53, -1642,     54, -1642,     55, -1642,
 56, -1642,     57, -1642,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     97,     0,     98,     0,
 99,     0,    100,     0,    101,     0,    102,     0,      0,     0,
  0,  1653,      1, -1539,      2, -1539,      3, -1539,      4, -1539,

  5, -1539,      6, -1539,      7, -1539,      8, -1539,      9, -1539,
 10, -1539,     11, -1539,     12, -1539,     13, -1539,     14, -1539,
 15, -1539,     16, -1539,     17, -1539,     18, -1539,     19, -1539,
 20, -1539,     21, -1539,     22, -1539,     23, -1539,     24, -1539,
 25, -1539,     26, -1539,     27, -1539,     28, -1539,     29, -1539,
 30, -1539,     31, -1539,     32, -1539,     33, -1539,     34, -1539,
 35, -1539,     36, -1539,     37, -1539,     38, -1539,     39, -1721,
 40, -1539,     41, -1539,     42, -1539,     43, -1539,     44, -1539,
 45, -1539,     46, -1539,     47, -1539,     48, -1539,     49, -1539,
 50, -1539,     51, -1539,     52, -1539,     53, -1539,     54, -1539,

 55, -1539,     56, -1539,     57, -1539,     58, -1539,     59, -1539,
 60, -1539,     61, -1539,     62, -1539,     63, -1539,     64, -1539,
 65, -1539,     66, -1539,     67, -1539,     68, -1539,     69, -1539,
 70, -1539,     71, -1539,     72, -1539,     73, -1539,     74, -1539,
 75, -1539,     76, -1539,     77, -1539,     78, -1539,     79, -1539,
 80, -1539,     81, -1539,     82, -1539,     83, -1539,     84, -1539,
 85, -1539,     86, -1539,     87, -1539,     88, -1539,     89, -1539,
 90, -1539,     91, -1539,     92, -1539,     93, -1539,     94, -1539,
 95, -1539,     96, -1539,     97, -1539,     98, -1539,     99, -1539,
100, -1539,    101, -1539,    102, -1539,    103, -1539,    104, -1539,

105, -1539,    106, -1539,    107, -1539,    108, -1539,    109, -1539,
110, -1539,    111, -1539,    112, -1539,    113, -1539,    114, -1539,
115, -1539,    116, -1539,    117, -1539,    118, -1539,    119, -1539,
120, -1539,    121, -1539,    122, -1539,    123, -1539,    124, -1539,
125, -1539,    126, -1539,    127, -1539,    128, -1539,    129, -1539,
130, -1539,    131, -1539,    132, -1539,    133, -1539,    134, -1539,
135, -1539,    136, -1539,    137, -1539,    138, -1539,    139, -1539,
140, -1539,    141, -1539,    142, -1539,    143, -1539,    144, -1539,
145, -1539,    146, -1539,    147, -1539,    148, -1539,    149, -1539,
150, -1539,    151, -1539,    152, -1539,    153, -1539,    154, -1539,

155, -1539,    156, -1539,    157, -1539,    158, -1539,    159, -1539,
160, -1539,    161, -1539,    162, -1539,    163, -1539,    164, -1539,
165, -1539,    166, -1539,    167, -1539,    168, -1539,    169, -1539,
170, -1539,    171, -1539,    172, -1539,    173, -1539,    174, -1539,
175, -1539,    176, -1539,    177, -1539,    178, -1539,    179, -1539,
180, -1539,    181, -1539,    182, -1539,    183, -1539,    184, -1539,
185, -1539,    186, -1539,    187, -1539,    188, -1539,    189, -1539,
190, -1539,    191, -1539,    192, -1539,    193, -1539,    194, -1539,
195, -1539,    196, -1539,    197, -1539,    198, -1539,    199, -1539,
200, -1539,    201, -1539,    202, -1539,    203, -1539,    204, -1539,

205, -1539,    206, -1539,    207, -1539,    208, -1539,    209, -1539,
210, -1539,    211, -1539,    212, -1539,    213, -1539,    214, -1539,
215, -1539,    216, -1539,    217, -1539,    218, -1539,    219, -1539,
220, -1539,    221, -1539,    222, -1539,    223, -1539,    224, -1539,
225, -1539,    226, -1539,    227, -1539,    228, -1539,    229, -1539,
230, -1539,    231, -1539,    232, -1539,    233, -1539,    234, -1539,
235, -1539,    236, -1539,    237, -1539,    238, -1539,    239, -1539,
240, -1539,    241, -1539,    242, -1539,    243, -1539,    244, -1539,
245, -1539,    246, -1539,    247, -1539,    248, -1539,    249, -1539,
250, -1539,    251, -1539,    252, -1539,    253, -1539,    254, -1539,

255, -1539,    256, -1539,      0,     0,      0,  1395,      0,     0,
  0,  1393,      0,    33,      0,  1391,      0,    32,      0,  1389,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 67,   372,      0,     0,     67,   372,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,     99,   372,      0,     0,     99,   372,
  0,     0,      0,  1292,      1, -1900,      2, -1900,      3, -1900,
  4, -1900,      5, -1900,      6, -1900,      7, -1900,      8, -1900,
  9, -1900,     10, -1900,     11, -1900,     12, -1900,     13, -1900,
 14, -1900,     15, -1900,     16, -1900,     17, -1900,     18, -1900,
 19, -1900,     20, -1900,     21, -1900,     22, -1900,     23, -1900,
 24, -1900,     25, -1900,     26, -1900,     27, -1900,     28, -1900,
 29, -1900,     30, -1900,     31, -1900,     32, -1900,     33, -1900,
 34, -1900,     35, -1900,     36, -1900,     37, -1900,     38, -1900,
 39, -2082,     40, -1900,     41, -1900,     42, -1900,     43, -1900,

 44, -1900,     45, -1900,     46, -1900,     47, -1900,     48, -1900,
 49, -1900,     50, -1900,     51, -1900,     52, -1900,     53, -1900,
 54, -1900,     55, -1900,     56, -1900,     57, -1900,     58, -1900,
 59, -1900,     60, -1900,     61, -1900,     62, -1900,     63, -1900,
 64, -1900,     65, -1900,     66, -1900,     67, -1900,     68, -1900,
 69, -1900,     70, -1900,     71, -1900,     72, -1900,     73, -1900,
 74, -1900,     75, -1900,     76, -1900,     77, -1900,     78, -1900,
 79, -1900,     80, -1900,     81, -1900,     82, -1900,     83, -1900,
 84, -1900,     85, -1900,     86, -1900,     87, -1900,     88, -1900,
 89, -1900,     90, -1900,     91, -1900,     92, -1900,     93, -1900,

 94, -1900,     95, -1900,     96, -1900,     97, -1900,     98, -1900,
 99, -1900,    100, -1900,    101, -1900,    102, -1900,    103, -1900,
104, -1900,    105, -1900,    106, -1900,    107, -1900,    108, -1900,
109, -1900,    110, -1900,    111, -1900,    112, -1900,    113, -1900,
114, -1900,    115, -1900,    116, -1900,    117, -1900,    118, -1900,
119, -1900,    120, -1900,    121, -1900,    122, -1900,    123, -1900,
124, -1900,    125, -1900,    126, -1900,    127, -1900,    128, -1900,
129, -1900,    130, -1900,    131, -1900,    132, -1900,    133, -1900,
134, -1900,    135, -1900,    136, -1900,    137, -1900,    138, -1900,
139, -1900,    140, -1900,    141, -1900,    142, -1900,    143, -1900,

144, -1900,    145, -1900,    146, -1900,    147, -1900,    148, -1900,
149, -1900,    150, -1900,    151, -1900,    152, -1900,    153, -1900,
154, -1900,    155, -1900,    156, -1900,    157, -1900,    158, -1900,
159, -1900,    160, -1900,    161, -1900,    162, -1900,    163, -1900,
164, -1900,    165, -1900,    166, -1900,    167, -1900,    168, -1900,
169, -1900,    170, -1900,    171, -1900,    172, -1900,    173, -1900,
174, -1900,    175, -1900,    176, -1900,    177, -1900,    178, -1900,
179, -1900,    180, -1900,    181, -1900,    182, -1900,    183, -1900,
184, -1900,    185, -1900,    186, -1900,    187, -1900,    188, -1900,
189, -1900,    190, -1900,    191, -1900,    192, -1900,    193, -1900,

194, -1900,    195, -1900,    196, -1900,    197, -1900,    198, -1900,
199, -1900,    200, -1900,    201, -1900,    202, -1900,    203, -1900,
204, -1900,    205, -1900,    206, -1900,    207, -1900,    208, -1900,
209, -1900,    210, -1900,    211, -1900,    212, -1900,    213, -1900,
214, -1900,    215, -1900,    216, -1900,    217, -1900,    218, -1900,
219, -1900,    220, -1900,    221, -1900,    222, -1900,    223, -1900,
224, -1900,    225, -1900,    226, -1900,    227, -1900,    228, -1900,
229, -1900,    230, -1900,    231, -1900,    232, -1900,    233, -1900,
234, -1900,    235, -1900,    236, -1900,    237, -1900,    238, -1900,
239, -1900,    240, -1900,    241, -1900,    242, -1900,    243, -1900,

244, -1900,    245, -1900,    246, -1900,    247, -1900,    248, -1900,
249, -1900,    250, -1900,    251, -1900,    252, -1900,    253, -1900,
254, -1900,    255, -1900,    256, -1900,      0,    54,      0,  1034,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,  1023,      0,     0,      0,  1021,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,    53,      0,  1011,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,   999,

  0,     0,      0,   997,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     48,     0,     49,     0,     50,     0,
 51,     0,     52,     0,     53,     0,     54,     0,     55,     0,
 56,     0,     57,     0,      0,    54,      0,   975,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,     65,     0,
 66,     0,     67,     0,     68,     0,     69,     0,     70,     0,
 48,     0,     49,     0,     50,     0,     51,     0,     52,     0,
 53,     0,     54,     0,     55,     0,     56,     0,     57,     0,
  0,     0,      0,   952,      0,     0,      0,     0,      0,     0,

  0,     0,     76,    24,      0,     0,     76,    24,      0,     0,
  0,     0,     69,   349,      0,    53,      0,   940,      0,     0,
  0,     0,     97,     0,     98,     0,     99,     0,    100,     0,
101,     0,    102,     0,      0,     0,      0,     0,     46, -1936,
  0,     0,     48,     0,     49,     0,     50,     0,     51,     0,
 52,     0,     53,     0,     54,     0,     55,     0,     56,     0,
 57,     0,      0,    54,      0,   916,    108,    24,     85,   270,
108,    24,     85,   302,      0,     0,    101,   349,     66, -2381,
  0,     0,      0,     0,     69, -1875,      0,     0,     48,    12,
 49,    12,     50,    12,     51,    12,     52,    12,     53,    12,

 54,    12,     55,    12,     56,    12,     57,    12,      0,     0,
  0,     0,     48,     0,     49,     0,     50,     0,     51,     0,
 52,     0,     53,     0,     54,     0,     55,     0,     56,     0,
 57,     0,    117,   270,      0,     0,    117,   302,      0,    55,
  0,   878,     98, -2381,      0,     0,      0,     0,    101, -1875,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 48,     0,     49,     0,     50,     0,     51,     0,     52,     0,
 53,     0,     54,     0,     55,     0,     56,     0,     57,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,   852,     65,     0,     66,     0,     67,     0,

 68,     0,     69,     0,     70,     0,      0,    12,      0,   844,
  9,     0,     36, -2438,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     48, -2438,     49, -2438,
 50, -2438,     51, -2438,     52, -2438,     53, -2438,     54, -2438,
 55, -2438,     56, -2438,     57, -2438,     32,     0,     97,     0,
 98,     0,     99,     0,    100,     0,    101,     0,    102,     0,
 65, -2438,     66, -2438,     67, -2438,     68, -2438,     69, -2438,
 70, -2438,     71, -2438,     72, -2438,     73, -2438,     74, -2438,
 75, -2438,     76, -2438,     77, -2438,     78, -2438,     79, -2438,

 80, -2438,     81, -2438,     82, -2438,     83,   248,     84, -2438,
 85, -2438,     86, -2438,     87, -2438,     88, -2438,     89, -2438,
 90, -2438,      0,     0,      0,     0,      0,     0,      0,     0,
 95, -2438,      0,     0,     97, -2438,     98, -2438,     99, -2438,
100, -2438,    101, -2438,    102, -2438,    103, -2438,    104, -2438,
105, -2438,    106, -2438,    107, -2438,    108, -2438,    109, -2438,
110, -2438,    111, -2438,    112, -2438,    113, -2438,    114, -2438,
115,   248,    116, -2438,    117, -2438,    118, -2438,    119, -2438,
120, -2438,    121, -2438,    122, -2438,      0,     0,      0,   754,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      9,   248,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,   729,
  0,     0,    125,     8,      0,     0,      0,     0,      0,     0,
  0,     0,     32,   248,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
 46,   372,      0,     0,     48,   372,     49,   372,     50,   372,
 51,   372,     52,   372,     53,   372,     54,   372,     55,   372,

 56,   372,     57,   372,      0,     0,      0,   695,      0,     0,
  0,   693,      0,     0,      0,   691,      0,     0,     65,   372,
 66,   372,     67,   372,     68,   372,     69,   372,     70,   372,
 71,   372,     72,   372,     73,   372,     74,   372,     75,   372,
 76,   372,     77,   372,     78,   372,     79,   372,     80,   372,
 81,   372,     82,   372,     83,   372,     84,   372,     85,   372,
 86,   372,     87,   372,     88,   372,     89,   372,     90,   372,
  0,     0,      0,   662,     68,    36,      0,     2,      0,   659,
  0,     0,     97,   372,     98,   372,     99,   372,    100,   372,
101,   372,    102,   372,    103,   372,    104,   372,    105,   372,

106,   372,    107,   372,    108,   372,    109,   372,    110,   372,
111,   372,    112,   372,    113,   372,    114,   372,    115,   372,
116,   372,    117,   372,    118,   372,    119,   372,    120,   372,
121,   372,    122,   372,      0,     3,      0,   630,    100,    36,
  0,     0,     68,     4,      0,     1,      0,   625,     69,    34,
  0,     0,     69,    66,      0,     0,      0,     0,     43,   372,
  0,     0,     45,   372,      0,     0,      0,     0,     48,   404,
 49,   404,     50,   404,     51,   404,     52,   404,     53,   404,
 54,   404,     55,   404,     56,   404,     57,   404,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,    100,     4,     36, -2686,
  0,     0,    101,    34,      0,     0,    101,    66,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,     48, -2686,     49, -2686,     50, -2686,     51, -2686,
 52, -2686,     53, -2686,     54, -2686,     55, -2686,     56, -2686,
 57, -2686,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     65, -2686,     66, -2686,
 67, -2686,     68, -2686,     69, -2686,     70, -2686,     71, -2686,
 72, -2686,     73, -2686,     74, -2686,     75, -2686,     76, -2686,
 77, -2686,     78, -2686,     79, -2686,     80, -2686,     81, -2686,

 82, -2686,     83, -2686,     84, -2686,     85, -2686,     86, -2686,
 87, -2686,     88, -2686,     89, -2686,     90, -2686,      0,     0,
  0,     0,      0,     0,      0,     0,     95, -2686,      0,     0,
 97, -2686,     98, -2686,     99, -2686,    100, -2686,    101, -2686,
102, -2686,    103, -2686,    104, -2686,    105, -2686,    106, -2686,
107, -2686,    108, -2686,    109, -2686,    110, -2686,    111, -2686,
112, -2686,    113, -2686,    114, -2686,    115, -2686,    116, -2686,
117, -2686,    118, -2686,    119, -2686,    120, -2686,    121, -2686,
122, -2686,      0,     0,      0,   506,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      9,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,     32,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     46,   124,      0,     0,
 48,   124,     49,   124,     50,   124,     51,   124,     52,   124,
 53,   124,     54,   124,     55,   124,     56,   124,     57,   124,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     65,   124,     66,   124,     67,   124,
 68,   124,     69,   124,     70,   124,     71,   124,     72,   124,
 73,   124,     74,   124,     75,   124,     76,   124,     77,   124,
 78,   124,     79,   124,     80,   124,     81,   124,     82,   124,
 83,   124,     84,   124,     85,   124,     86,   124,     87,   124,
 88,   124,     89,   124,     90,   124,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,     97,   124,
 98,   124,     99,   124,    100,   124,    101,   124,    102,   124,
103,   124,    104,   124,    105,   124,    106,   124,    107,   124,

108,   124,    109,   124,    110,   124,    111,   124,    112,   124,
113,   124,    114,   124,    115,   124,    116,   124,    117,   124,
118,   124,    119,   124,    120,   124,    121,   124,    122,   124,
  0,     0,      0,   382,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  9,  -470,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     32,  -470,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,     46,     0,      0,     0,     48,     0,
 49,     0,     50,     0,     51,     0,     52,     0,     53,     0,
 54,     0,     55,     0,     56,     0,     57,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,     65,     0,     66,     0,     67,     0,     68,     0,
 69,     0,     70,     0,     71,     0,     72,     0,     73,     0,
 74,     0,     75,     0,     76,     0,     77,     0,     78,     0,
 79,     0,     80,     0,     81,     0,     82,     0,     83,     0,

 84,     0,     85,     0,     86,     0,     87,     0,     88,     0,
 89,     0,     90,     0,      0,     0,      0,   290,      0,     0,
  0,     0,      0,     0,      0,     0,     97,     0,     98,     0,
 99,     0,    100,     0,    101,     0,    102,     0,    103,     0,
104,     0,    105,     0,    106,     0,    107,     0,    108,     0,
109,     0,    110,     0,    111,     0,    112,     0,    113,     0,
114,     0,    115,     0,    116,     0,    117,     0,    118,     0,
119,     0,    120,     0,    121,     0,    122,     0,      0,    53,
  0,   258,    125,  -462,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,     48,    32,     49,    32,     50,    32,     51,    32,
 52,    32,     53,    32,     54,    32,     55,    32,     56,    32,
 57,    32,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,     48,     0,     49,     0,
 50,     0,     51,     0,     52,     0,     53,     0,     54,     0,
 55,     0,     56,     0,     57,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,

  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,      0,     0,      0,     0,      0,     0,
  0,     0,      0,     0,    257,    61,      1,     0, };

static const struct yy_trans_info* yy_start_state_list[7] =
{
&yy_transition[1],
&yy_transition[3],
&yy_transition[261],
&yy_transition[519],
&yy_transition[777],
&yy_transition[1035],
&yy_transition[1293],


};

static yy_state_type yy_last_accepting_state;
static char* yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char* yytext;
//# line  1 "lex.l"
//# line  2 "lex.l"

#include "token.h"
#include "util.h"

#ifdef _WIN32
#include <io.h>
#define FILE_SEP "\\"
#else
#include <unistd.h>
#define FILE_SEP "/"
#endif

#define yywrap() 1
#define YY_SKIP_YYWRAP 1

#define YY_NO_UNPUT 1

// Some static data definition

static char* file_name;
static int line, pos;    // Token position
extern char* i_path;

struct scan_state {
	int             pos;
	int             line;
	char* file_name;
	char* search_path;
	FILE* input;
	YY_BUFFER_STATE buffer;
};

#define MAX_INCLUDE_DEPTH 256   // Include stack depth
#define MAX_ID_LENGTH     256

class scan_ctx {
protected:
	scan_state      stack[MAX_INCLUDE_DEPTH];
	int             sp;

public:
	void push();
	void attach(char* name, FILE* in);
	void pop();
	bool empty() { return sp == 0; }
	bool find(char* name);
	scan_ctx() { sp = 0; }
};

static scan_ctx scanner;
static int type_or_var_context;


void scanner_input(char* file)
{
	FILE* f = fopen(file, "r");

	if (f == NULL) {
		error("can't open input source file: %s", file);
	}
	scanner.attach(file, f);
}


// Hints for macro functionality (inherited from rtl2c)
static nm_entry* nm = NULL;	       // Token name
static char* text = NULL;            // Token text if != NULL

static int include_level;

class use_ctx {
public:
	char* fname;
	use_ctx* next;

	use_ctx(char* name, use_ctx* chain) {
		fname = name;
		next = chain;
	}
};

static use_ctx* use_chain;

#undef  ECHO
#define ECHO 

// Token generator function

int tkn(int tag) {
	curr_token = new token(text ? text : _strdup(yytext),
		tag, line, pos, nm);
	if(token::dummy.prev_relevant()!=NULL 
		&& token::dummy.prev_relevant()->in_text!=NULL
		&& 0 == strcmp(token::dummy.prev_relevant()->in_text, "(")
		&& token::dummy.prev_relevant()->prev_relevant() !=NULL
		&& token::dummy.prev_relevant()->prev_relevant()->in_text!=NULL
		&& 0 == strcmp(token::dummy.prev_relevant()->prev_relevant()->in_text, "sizeof")
		&& curr_token->tag != TKN_IDENT)
	{
		//token* pr = token::dummy.prev_relevant();
		//NOTICE:FIXME:
		//sizeof(String) is not recognized well
		//we fix this by back tracing,
		//however, this is not a good way
		//we need to redesign the grammar and the parser
		curr_token->tag = TKN_IDENT;
	}
	nm = NULL; text = NULL;
	for (char* c = yytext; *c != 0; c++) {
		if (*c == '\n') { line++; pos = 0; }
		else if (*c == '\t') { pos += TAB_WIDTH - (pos % TAB_WIDTH); }
		else pos++;
	}
	curr_token->fname = file_name;
	if (include_level > 0) {
		curr_token->attr |= token::from_include_file;
	}
	return 1;
}

// Include file name processing

static char* include_name(char* src) {
	char* t;
	char* name = new char[strlen(src) + 8];
	char* dst = name;
	if (strchr(src, '\n') != NULL) {
		line += 1;
		pos = 0;
	}
	while (*src == '\'' || isspace(*src)) src++;        // Skip leading '[ ]
	if ((t = strchr(src, '[')) != NULL) {
#if 0
		int gid, uid, n;
		if (sscanf(t, "[%d,%d]%n", &gid, &uid, &n) == 2) {
			dst += sprintf(dst, "../%03d%03d/", gid, uid);
			src = t + n;
		}
		else
#endif
		{
			if ((t = strrchr(src, ']')) != NULL) {
				src = t + 1;
			}
		}
	}
	bool suffix = FALSE;
	while (*src && !isspace(*src) && *src != ';' && *src != '\''
		&& *src != '\n' && *src != '}')
	{
		if (*src == '.') suffix = TRUE;
		*dst++ = tolower(*(unsigned char*)src++);
	}
	*dst = 0;
	if (!suffix) strcpy(dst, ".pas");

	if (scanner.find(name)) {
		error(line, pos, file_name, "file %s already included !\n", name);
	}
	return name;
}

static int yyinput(void);

inline int yyinput_file() {
	int ch = yyinput();
	if (ch == '\n') { line++; pos = 0; }
	else if (ch == '\t') { pos += TAB_WIDTH - (pos % TAB_WIDTH); }
	else pos++;
	return ch;
}

static int process_comments() {
	static int cmt_buf_len = 256;
	static char* cmt_buf = new char[cmt_buf_len];
	int c, pc = 0;
	char* p = cmt_buf;
	char cmt_start = *yytext;
	*p++ = '/';
	*p++ = '*';

	curr_token = new token(NULL, TKN_CMNT, line, pos);

	pos += strlen(yytext);

	if (nested_comments) {
		while ((c = yyinput_file()) != EOF) {
			if (c == '/' && pc == '*') c = ' ';
			if (p == cmt_buf + cmt_buf_len) {
				cmt_buf = (char*)realloc(cmt_buf, 2 * cmt_buf_len);
				p = cmt_buf + cmt_buf_len;
				cmt_buf_len *= 2;
			}
			if ((cmt_start == '{' && c == '}') ||
				(cmt_start == '(' && c == ')' && pc == '*'))
			{
				size_t len = p - cmt_buf;
				char* cmt_text = new char[len + 3];
				memcpy(cmt_text, cmt_buf, len);
				if (pc != '*') cmt_text[len++] = '*';
				cmt_text[len++] = '/';
				cmt_text[len] = '\0';
				if (turbo_pascal && cmt_text[2] == '$') {
					*p = '\0';
					if (strincmp(cmt_text + 3, "IFDEF", 5) == 0) {
						sprintf(cmt_text, "#ifdef %s", cmt_buf + 9);
					}
					else if (strincmp(cmt_text + 3, "ELSE", 4) == 0) {
						sprintf(cmt_text, "#else");
					}
					else if (strincmp(cmt_text + 3, "ENDIF", 5) == 0) {
						sprintf(cmt_text, "#endif");
					}
					else if (strincmp(cmt_text + 3, "IFNDEF", 6) == 0) {
						sprintf(cmt_text, "#ifndef %s", cmt_buf + 10);
					}
					else if (strincmp(cmt_text + 3, "DEFINE", 6) == 0) {
						sprintf(cmt_text, "#define %s", cmt_buf + 10);
					}
					else if (strincmp(cmt_text + 3, "IFOPT", 5) == 0) {
						int value = 1;
						char* p = strchr(cmt_text + 8, '+');
						if (p != NULL) *p = '\0';
						else if ((p = strchr(cmt_text + 8, '-')) != NULL) {
							value = 0;
							*p = '\0';
						}
						for (p = cmt_buf + 8; *p == ' '; p++);
						sprintf(cmt_text, "#if OPTION_%s == %d",
							p, value);
					}
				}
				curr_token->in_text = curr_token->out_text = cmt_text;
				return 1;
			}
			*p++ = pc = c;
		}
	}
	else {
		while ((c = yyinput_file()) != EOF) {
			if (c == '/' && pc == '*') c = ' ';
			if (p == cmt_buf + cmt_buf_len) {
				cmt_buf = (char*)realloc(cmt_buf, 2 * cmt_buf_len);
				p = cmt_buf + cmt_buf_len;
				cmt_buf_len *= 2;
			}
			if (c == '}' || (c == ')' && pc == '*')) {
				size_t len = p - cmt_buf;
				char* cmt_text = new char[len + 3];
				memcpy(cmt_text, cmt_buf, len);
				if (pc != '*') cmt_text[len++] = '*';
				cmt_text[len++] = '/';
				cmt_text[len] = '\0';
				curr_token->in_text = curr_token->out_text = cmt_text;
				return 1;
			}
			*p++ = pc = c;
		}
	}
	error(line, pos, file_name, "EOF in comment !\n");
	return -1;
}

/* the "incl" state is used for picking up the name
 * of an include file
 */

 /* Macros after this point can all be overridden by user definitions in
  * section 1.
  */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
  /* Just try to get by without declaring the routines.  This will fail
   * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
   * or sizeof(void*) != sizeof(int).
   */
#endif
#endif

   /* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

 /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
  * is returned in "result".
  */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( _fileno(yyin), (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

  /* No semi-colon after return; correct usage is to write "yyterminate();" -
   * we don't want an extra ';' after the "return" because that will cause
   * some compilers to complain about unreachable statements.
   */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

   /* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

 /* Code executed at the beginning of each rule, after yytext and yyleng
  * have been set up.
  */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

  /* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
{
register yy_state_type yy_current_state;
register char* yy_cp,* yy_bp;
register int yy_act;

//# line  269 "lex.l"



	if (yy_init)
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if (!yy_start)
			yy_start = 1;	/* first start state */

		if (!yyin)
			yyin = stdin;

		if (!yyout)
			yyout = stdout;

		if (yy_current_buffer)
			yy_init_buffer(yy_current_buffer, yyin);
		else
			yy_current_buffer =
				yy_create_buffer(yyin, YY_BUF_SIZE);

		yy_load_buffer_state();

		yy_init = 0;
		}

	while (1)		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yy_start];
yy_match:
		{
		register const struct yy_trans_info* yy_trans_info;

		register YY_CHAR yy_c;

		for (yy_c = YY_SC_TO_UI(*yy_cp);
			  (yy_trans_info = &yy_current_state[(unsigned int)yy_c])->
		yy_verify == yy_c;
			  yy_c = YY_SC_TO_UI(*++yy_cp))
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if (yy_current_state[-1].yy_nxt)
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch (yy_act)
	{ /* beginning of action switch */
			case 0: /* must back up */
				/* undo the effects of YY_DO_BEFORE_ACTION */
				*yy_cp = yy_hold_char;
				yy_cp = yy_last_accepting_cpos + 1;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;

	case 1:
	YY_USER_ACTION
		//# line  271 "lex.l"
		BEGIN(incl);
			YY_BREAK
		case 2:
		YY_USER_ACTION
			//# line  272 "lex.l"
			BEGIN(incl);
				YY_BREAK
			case 3:
			YY_USER_ACTION
				//# line  273 "lex.l"
				BEGIN(use); /* Turbo Pascal */
					YY_BREAK
				case 4:
				YY_USER_ACTION
					//# line  275 "lex.l"
					{  /* skip whitespaces */
						char* p = yytext;
						while (*p != '\0') {
						if (*p++ == '\n') line += 1;
						}
					}
						YY_BREAK
					case 5:
					YY_USER_ACTION
						//# line  282 "lex.l"
						{ /* skip comments */
							char* p = yytext;
							while (*p != '\0') {
							if (*p++ == '\n') line += 1;
							}
						}
							YY_BREAK
						case 6:
						YY_USER_ACTION
							//# line  289 "lex.l"
							{
							/* got the include file name */
			  char* fname = dprintf("%s.pas", yytext);
			  for (char* p = fname; *p != '\0'; p++) *p = tolower(*p);

			  use_ctx* up;
			  for (up = use_chain;
			   up != NULL && strcmp(fname, up->fname) != 0;
			   up = up->next);

			  if (up == NULL) {
				  char* xname;
				  FILE* in = NULL;
				  char* try_dir,* next_dir;
				  int dir_length;

			  for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
				  if ((next_dir = strchr(try_dir, path_sep)) != NULL) {
				  dir_length = next_dir - try_dir;
				  next_dir++;
				  }
		   else {
		dir_length = strlen(try_dir);
		}
		xname = dprintf("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
		if ((in = fopen(xname, "r")) != NULL) {
		use_chain = new use_ctx(fname, use_chain);
		curr_token = new token(xname, TKN_PUSH_UNIT);
		curr_token->out_text = fname;
		include_level += 1;
		BEGIN(INITIAL);     // To leave include state
		scanner.push();
		scanner.attach(xname, in);
		return 1;
		}
	}
	warning(line, pos, file_name, "can't include file %s", fname);
		curr_token = new token(dprintf("/*#include \"%s.h\"*/\n", yytext),
						   TKN_CMNT, line, pos);
	}
 else {
  curr_token = new token(dprintf("#include \"%s.h\"\n", yytext),
					 TKN_CMNT, line, pos);
}
return 1;
}
	YY_BREAK
case 7:
YY_USER_ACTION
//# line  333 "lex.l"
{
	BEGIN(INITIAL);     // To leave include state
}
	YY_BREAK
case 8:
YY_USER_ACTION
//# line  338 "lex.l"
{
	error(line, pos, file_name, "unrecognized token: %s\n",
		yytext);
}
	YY_BREAK
case 9:
YY_USER_ACTION
//# line  346 "lex.l"
{  /* eat the whitespace */
	char* p = yytext;
	while (*p != '\0') {
	if (*p++ == '\n') line += 1;
	}
}
	YY_BREAK
case 10:
YY_USER_ACTION
//# line  352 "lex.l"
{
	/* got the include file name */
BEGIN(INITIAL);     // To leave include state

char* fname = include_name(yytext);
char* xname;
FILE* in = NULL;
char* try_dir,* next_dir;
int dir_length;

for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
if ((next_dir = strchr(try_dir, path_sep)) != NULL) {
	dir_length = next_dir - try_dir;
	next_dir++;
}
else {
 dir_length = strlen(try_dir);
}
xname = dprintf("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
if ((in = fopen(xname, "r")) != NULL) {
	include_level += 1;
	scanner.push();
	scanner.attach(xname, in);
	curr_token = new token(xname, TKN_PUSH_FILE);
	curr_token->out_text = fname;
	return 1;
}
}
warning(line, pos, file_name, "can't include file %s", fname);
curr_token = new token(dprintf("/*#include \"%s\"*/", fname),
				   TKN_CMNT, line, pos);
return 1;
}
	YY_BREAK
case 11:
YY_USER_ACTION
//# line  385 "lex.l"
{
	error(line, pos, file_name, "unrecognized token: %s\n",
		yytext);
}
	YY_BREAK
case 12:
YY_USER_ACTION
//# line  390 "lex.l"
{
	char* fname = include_name(yytext + 3);
	char* xname;
	FILE* in = NULL;
	char* try_dir,* next_dir;
	int dir_length;

	for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	if ((next_dir = strchr(try_dir, path_sep)) != NULL) {
		dir_length = next_dir - try_dir;
		next_dir++;
	}
 else {
  dir_length = (int)strlen(try_dir);
}
xname = dprintf("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
if ((in = fopen(xname, "r")) != NULL) {
	include_level += 1;
	scanner.push();
	scanner.attach(xname, in);
	curr_token = new token(xname, TKN_PUSH_FILE);
	curr_token->out_text = fname;
	return 1;
}
}
warning(line, pos, file_name, "can't include file %s", fname);
curr_token = new token(dprintf("/*#include \"%s\"*/", fname),
				   TKN_CMNT, line, pos);
return 1;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(use):
	//# line  420 "lex.l"
	{
		if (scanner.empty()) {
		return -1;  // MAGIC ! (< 0 means end of files)
		}
	 else {
  scanner.pop();
  include_level -= 1;
  curr_token = new token((char*)NULL, TKN_POP_FILE);
  return 1;
  }
}
	YY_BREAK
case 13:
YY_USER_ACTION
//# line  431 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 14:
YY_USER_ACTION
//# line  432 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 15:
YY_USER_ACTION
//# line  433 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 16:
YY_USER_ACTION
//# line  435 "lex.l"
{ return tkn(TKN_LPAR); }
	YY_BREAK
case 17:
YY_USER_ACTION
//# line  436 "lex.l"
{ return tkn(TKN_RPAR); }
	YY_BREAK
case 18:
YY_USER_ACTION
//# line  437 "lex.l"
{ text = "["; return tkn(TKN_LBR);  }
	YY_BREAK
case 19:
YY_USER_ACTION
//# line  438 "lex.l"
{ text = "]"; return tkn(TKN_RBR);  }
	YY_BREAK
case 20:
YY_USER_ACTION
//# line  439 "lex.l"
{ return tkn(TKN_LBR);  }
	YY_BREAK
case 21:
YY_USER_ACTION
//# line  440 "lex.l"
{ return tkn(TKN_RBR);  }
	YY_BREAK
case 22:
YY_USER_ACTION
//# line  441 "lex.l"
{ return tkn(TKN_MUL);  }
	YY_BREAK
case 23:
YY_USER_ACTION
//# line  442 "lex.l"
{ return tkn(TKN_PLUS); }
	YY_BREAK
case 24:
YY_USER_ACTION
//# line  443 "lex.l"
{ return tkn(TKN_MINUS); }
	YY_BREAK
case 25:
YY_USER_ACTION
//# line  444 "lex.l"
{ return tkn(TKN_C_SHR); }
	YY_BREAK
case 26:
YY_USER_ACTION
//# line  445 "lex.l"
{ return tkn(TKN_C_SHL); }
	YY_BREAK
case 27:
YY_USER_ACTION
//# line  446 "lex.l"
{ return tkn(TKN_C_AND); }
	YY_BREAK
case 28:
YY_USER_ACTION
//# line  447 "lex.l"
{ return tkn(TKN_C_OR); }
	YY_BREAK
case 29:
YY_USER_ACTION
//# line  448 "lex.l"
{ return tkn(TKN_LETMUL);  }
	YY_BREAK
case 30:
YY_USER_ACTION
//# line  449 "lex.l"
{ return tkn(TKN_LETADD); }
	YY_BREAK
case 31:
YY_USER_ACTION
//# line  450 "lex.l"
{ return tkn(TKN_LETSUB); }
	YY_BREAK
case 32:
YY_USER_ACTION
//# line  451 "lex.l"
{ return tkn(TKN_LETSHR); }
	YY_BREAK
case 33:
YY_USER_ACTION
//# line  452 "lex.l"
{ return tkn(TKN_LETSHL); }
	YY_BREAK
case 34:
YY_USER_ACTION
//# line  453 "lex.l"
{ return tkn(TKN_LETAND); }
	YY_BREAK
case 35:
YY_USER_ACTION
//# line  454 "lex.l"
{ return tkn(TKN_LETOR); }
	YY_BREAK
case 36:
YY_USER_ACTION
//# line  455 "lex.l"
{ return tkn(TKN_LETDIV); }
	YY_BREAK
case 37:
YY_USER_ACTION
//# line  456 "lex.l"
{ return tkn(TKN_C_NOT); }
	YY_BREAK
case 38:
YY_USER_ACTION
//# line  457 "lex.l"
{ return tkn(TKN_COMMA); }
	YY_BREAK
case 39:
YY_USER_ACTION
//# line  458 "lex.l"
{ return tkn(TKN_DOT);  }
	YY_BREAK
case 40:
YY_USER_ACTION
//# line  459 "lex.l"
{ return tkn(TKN_DOTS); }
	YY_BREAK
case 41:
YY_USER_ACTION
//# line  460 "lex.l"
{ return tkn(TKN_DIVR);  }
	YY_BREAK
case 42:
YY_USER_ACTION
//# line  461 "lex.l"
{ return turbo_pascal ? tkn(TKN_ADDR) : tkn(TKN_HEAP); }
	YY_BREAK
case 43:
YY_USER_ACTION
//# line  462 "lex.l"
{ if (turbo_pascal && !type_or_var_context
		  && curr_token->tag != TKN_RBR && curr_token->tag != TKN_RPAR
		  && curr_token->tag != TKN_REF
		  && curr_token->tag != TKN_IDENT)
			   {
		   text = dprintf("#%d", yyinput() & 31);
		   return tkn(TKN_SCONST);
			  }
		  return tkn(TKN_HEAP);
			}
	YY_BREAK
case 44:
YY_USER_ACTION
//# line  472 "lex.l"
{ return tkn(TKN_LET);  }
	YY_BREAK
case 45:
YY_USER_ACTION
//# line  473 "lex.l"
{ return tkn(TKN_COLON); }
	YY_BREAK
case 46:
YY_USER_ACTION
//# line  474 "lex.l"
{ return tkn(TKN_SEMICOLON); }
	YY_BREAK
case 47:
YY_USER_ACTION
//# line  475 "lex.l"
{ return tkn(TKN_LE);  }
	YY_BREAK
case 48:
YY_USER_ACTION
//# line  476 "lex.l"
{ return tkn(TKN_GE);  }
	YY_BREAK
case 49:
YY_USER_ACTION
//# line  477 "lex.l"
{ return tkn(TKN_LT);  }
	YY_BREAK
case 50:
YY_USER_ACTION
//# line  478 "lex.l"
{ return tkn(TKN_GT);  }
	YY_BREAK
case 51:
YY_USER_ACTION
//# line  479 "lex.l"
{ return tkn(TKN_EQ);  }
	YY_BREAK
case 52:
YY_USER_ACTION
//# line  480 "lex.l"
{ return tkn(TKN_NE);  }
	YY_BREAK
case 53:
YY_USER_ACTION
//# line  483 "lex.l"
{ return tkn(TKN_RCONST); }
	YY_BREAK
case 54:
YY_USER_ACTION
//# line  484 "lex.l"
{ return tkn(TKN_ICONST);  }
	YY_BREAK
case 55:
YY_USER_ACTION
//# line  486 "lex.l"
{
			   char lc_buf[MAX_ID_LENGTH];
		   char* src = yytext,* dst = lc_buf;
		   if (turbo_pascal && *yytext == '$') { /* hexademical number */
			   return tkn(TKN_ICONST);
		   }
		   do {
			   *dst++ = tolower(*(unsigned char*)src);
		   } while (*src++);
		   nm = nm_entry::add(lc_buf, TKN_IDENT);
		   int tag = nm->tag;

		   if (turbo_pascal) {
			   if (tag == TKN_TYPE || tag == TKN_VAR) {
			   type_or_var_context = TRUE;
			   }
 else if (tag == TKN_BEGIN || tag == TKN_CONST) {
type_or_var_context = FALSE;
}
else if (tag == TKN_IMPLEMENTATION) {
 if (include_level > 0) {
	 scanner.pop();
	 include_level -= 1;
 BEGIN(use);
 curr_token = new token((char*)NULL, TKN_UNIT_END);
			 return 1;
		 }
else {
return tkn(TKN_IMPLEMENTATION);
	}
}
else if (tag == TKN_INTERFACE) {
		 if (use_chain == NULL) {
			 use_chain = new use_ctx(file_name, NULL);
		 }
 tkn(TKN_INTERFACE);
 return 1;
}
	}
if (tag == TKN_RESERVED) {
	text = dprintf("%s_", lc_buf);
	nm = nm_entry::add(text, TKN_IDENT);
	tag = TKN_IDENT;
}
else if (!preserve_case || tag != TKN_IDENT) {
 text = _strdup(lc_buf);
}
return tkn(tag);
  }
YY_BREAK
case 56:
YY_USER_ACTION
//# line  532 "lex.l"
{ return tkn(TKN_SCONST); }
	YY_BREAK
case 57:
YY_USER_ACTION
//# line  534 "lex.l"
{ return tkn(TKN_SPACE); }
	YY_BREAK
case 58:
YY_USER_ACTION
//# line  536 "lex.l"
{ return tkn(TKN_LN); }
	YY_BREAK
case 59:
YY_USER_ACTION
//# line  538 "lex.l"
{
				error(line, pos, file_name, "unrecognized token: %s\n",
			  yytext);
			 }
	YY_BREAK
case 60:
YY_USER_ACTION
//# line  543 "lex.l"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans(yy_current_state);

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if (yy_next_state)
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
							yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch (yy_get_next_buffer())
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if (yywrap())
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if (!yy_did_buffer_switch_on_eof)
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found");
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

	static int yy_get_next_buffer()
{
	register char* dest = yy_current_buffer->yy_ch_buf;
	register char* source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--end of buffer missed");

	if (yy_current_buffer->yy_fill_buffer == 0)
	{ /* Don't try to fill the buffer, so this is an EOF. */
		if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
		{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else
		{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	for (i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
	{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)
		{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
				"input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char*)
				yy_flex_realloc((void*)b->yy_ch_buf,
					b->yy_buf_size);

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
					"fatal error - scanner input buffer overflow");

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
				number_to_move - 1;
#endif
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read);
	}

	if (yy_n_chars == 0)
	{
		if (number_to_move - YY_MORE_ADJ == 1)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char* yy_cp;

	yy_current_state = yy_start_state_list[yy_start];

	for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
	{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if (yy_current_state[-1].yy_nxt)
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
	}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
#else
static yy_state_type yy_try_NUL_trans(yy_current_state)
yy_state_type yy_current_state;
#endif
{
	register int yy_is_jam;
	register char* yy_cp = yy_c_buf_p;

	register int yy_c = 256;
	register const struct yy_trans_info* yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int)yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if (!yy_is_jam)
	{
		if (yy_current_state[-1].yy_nxt)
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
	}

	return yy_is_jam ? 0 : yy_current_state;
}


#ifdef YY_USE_PROTOS
static void yyunput(int c, register char* yy_bp)
#else
static void yyunput(c, yy_bp)
int c;
register char* yy_bp;
#endif
{
	register char* yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
	{ /* need to shift things up to make room */
	/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char* dest = &yy_current_buffer->yy_ch_buf[
			yy_current_buffer->yy_buf_size + 2];
		register char* source =
			&yy_current_buffer->yy_ch_buf[number_to_move];

		while (source > yy_current_buffer->yy_ch_buf)
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
			YY_FATAL_ERROR("flex scanner push-back overflow");
	}

	if (yy_cp > yy_bp && yy_cp[-1] == '\n')
		yy_cp[-2] = '\n';

	*--yy_cp = (char)c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
	{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
		{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch (yy_get_next_buffer())
			{
			case EOB_ACT_END_OF_FILE:
			{
				if (yywrap())
				{
					yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
					return EOF;
				}

				YY_NEW_FILE;
#ifdef __cplusplus
				return yyinput();
#else
				return input();
#endif
			}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
				break;

			case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
				YY_FATAL_ERROR(
					"unexpected last match in yyinput()");
#else
				YY_FATAL_ERROR(
					"unexpected last match in input()");
#endif
			}
		}
	}

	c = *(unsigned char*)yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
}


#ifdef YY_USE_PROTOS
void yyrestart(FILE* input_file)
#else
void yyrestart(input_file)
FILE* input_file;
#endif
{
	if (!yy_current_buffer)
		yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

	yy_init_buffer(yy_current_buffer, input_file);
	yy_load_buffer_state();
}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
#else
void yy_switch_to_buffer(new_buffer)
YY_BUFFER_STATE new_buffer;
#endif
{
	if (yy_current_buffer == new_buffer)
		return;

	if (yy_current_buffer)
	{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state(void)
#else
void yy_load_buffer_state()
#endif
{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size)
#else
YY_BUFFER_STATE yy_create_buffer(file, size)
FILE* file;
int size;
#endif
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));

	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char*)yy_flex_alloc(b->yy_buf_size + 2);

	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	yy_init_buffer(b, file);

	return b;
}


#ifdef YY_USE_PROTOS
void yy_delete_buffer(YY_BUFFER_STATE b)
#else
void yy_delete_buffer(b)
YY_BUFFER_STATE b;
#endif
{
	if (b == yy_current_buffer)
		yy_current_buffer = (YY_BUFFER_STATE)0;

	yy_flex_free((void*)b->yy_ch_buf);
	yy_flex_free((void*)b);
}


#ifdef YY_USE_PROTOS
void yy_init_buffer(YY_BUFFER_STATE b, FILE* file)
#else
void yy_init_buffer(b, file)
YY_BUFFER_STATE b;
FILE* file;
#endif
{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = file ? isatty(_fileno(file)) : 0;

	b->yy_fill_buffer = 1;

	b->yy_buffer_status = YY_BUFFER_NEW;
}


#ifdef YY_USE_PROTOS
static void yy_push_state(int new_state)
#else
static void yy_push_state(new_state)
int new_state;
#endif
{
	if (yy_start_stack_ptr >= yy_start_stack_depth)
	{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof(int);

		if (!yy_start_stack)
			yy_start_stack = (int*)yy_flex_alloc(new_size);

		else
			yy_start_stack = (int*)yy_flex_realloc(
				(void*)yy_start_stack, new_size);

		if (!yy_start_stack)
			YY_FATAL_ERROR(
				"out of memory expanding start-condition stack");
	}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}


static void yy_pop_state()
{
	if (--yy_start_stack_ptr < 0)
		YY_FATAL_ERROR("start-condition stack underflow");

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
}


static int yy_top_state()
{
	return yy_start_stack[yy_start_stack_ptr - 1];
}


#ifdef YY_USE_PROTOS
static void yy_fatal_error(const char msg[])
#else
static void yy_fatal_error(msg)
char msg[];
#endif
{
	(void)fprintf(stderr, "%s\n", msg);
	exit(1);
}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char* s1, const char* s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char* s1;
const char* s2;
int n;
#endif
{
	register int i;
	for (i = 0; i < n; ++i)
		s1[i] = s2[i];
}
#endif


#ifdef YY_USE_PROTOS
static void* yy_flex_alloc(unsigned int size)
#else
static void* yy_flex_alloc(size)
unsigned int size;
#endif
{
	return (void*)malloc(size);
}

#ifdef YY_USE_PROTOS
static void* yy_flex_realloc(void* ptr, unsigned int size)
#else
static void* yy_flex_realloc(ptr, size)
void* ptr;
unsigned int size;
#endif
{
	return (void*)realloc(ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void* ptr)
#else
static void yy_flex_free(ptr)
void* ptr;
#endif
{
	free(ptr);
}
//# line  543 "lex.l"


void scan_ctx::push() {
	assert(sp < MAX_INCLUDE_DEPTH);
	stack[sp].file_name = file_name;
	stack[sp].buffer = YY_CURRENT_BUFFER;
	stack[sp].search_path = i_path;
	stack[sp].pos = pos;
	stack[sp].line = line;
	stack[sp].input = yyin;
	sp += 1;
}


void scan_ctx::attach(char* name, FILE* in) {
	pos = 0;
	line = 1;
	file_name = name;
	yyin = in;
	char* base_name = strrchr(name, PATH_SEP);
	if (base_name != NULL) {
		i_path = dprintf("%.*s%c%s", base_name - name, name, path_sep, i_path);
	}
	yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
}

void scan_ctx::pop() {
	assert(sp > 0);
	sp -= 1;
	pos = stack[sp].pos;
	line = stack[sp].line;
	file_name = stack[sp].file_name;
	fclose(yyin);
	yyin = stack[sp].input;
	i_path = stack[sp].search_path;
	yy_switch_to_buffer(stack[sp].buffer);
}

bool scan_ctx::find(char* name) {
	for (int i = 0; i < sp; i++) {
		if (strcmp(stack[i].file_name, name) == 0) {
			return TRUE;
		}
	}
	return FALSE;
}

