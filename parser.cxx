
/*  A Bison parser, made from parser.y
 by  GNU Bison version 1.25
  */
#define YYERROR_VERBOSE 1
//#define YYDEBUG 1
#define YYBISON 1  /* Identify Bison output.  */

#define yyparse zzparse
#define yylex zzlex
#define yyerror zzerror
#define yylval zzlval
#define yychar zzchar
#define yydebug zzdebug
#define yynerrs zznerrs
#define	ARRAY	258
#define	BEGIN	259
#define	CASE	260
#define	CONST	261
#define	DO	262
#define	DOTS	263
#define	ELSE	264
#define	END	265
#define	FIL	266
#define	FAR	267
#define	FOR	268
#define	FUNCTION	269
#define	GOTO	270
#define	IDENT	271
#define	ICONST	272
#define	IF	273
#define	IMPLEMENTATION	274
#define	INTERFACE	275
#define	LABEL	276
#define	LET	277
#define	LOOPHOLE	278
#define	OBJECT	279
#define	OF	280
#define	ORIGIN	281
#define	OTHERWISE	282
#define	PACKED	283
#define	PROCEDURE	284
#define	PROGRAM	285
#define	RCONST	286
#define	READ	287
#define	RECORD	288
#define	REPEAT	289
#define	RETURN	290
#define	SET	291
#define	SCONST	292
#define	STRING	293
#define	THEN	294
#define	TO	295
#define	TYPE	296
#define	UNTIL	297
#define	UNIT	298
#define	UNIT_END	299
#define	VAR	300
#define	WHILE	301
#define	WITH	302
#define	WRITE	303
#define	SCOPE	304
#define	LETADD	305
#define	LETSUB	306
#define	LETDIV	307
#define	LETMUL	308
#define	LETAND	309
#define	LETOR	310
#define	LETSHL	311
#define	LETSHR	312
#define	EQ	313
#define	NE	314
#define	LT	315
#define	LE	316
#define	GT	317
#define	GE	318
#define	IN	319
#define	PLUS	320
#define	MINUS	321
#define	OR	322
#define	XOR	323
#define	MOD	324
#define	DIV	325
#define	DIVR	326
#define	MUL	327
#define	AND	328
#define	SHR	329
#define	SHL	330
#define	UPLUS	331
#define	UMINUS	332
#define	NOT	333
#define	ADDRESS	334

  //#line  1 "parser.y"


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef __DECCXX
#include <alloca.h>
#else
#include <malloc.h>
#endif

#include "nmtbl.h"
#include "token.h"
#include "trnod.h"
#include "util.h"

static int zzcnv_table[] = {
#define DEF_TOKEN(mnem, cat, cls, yacc) yacc,
#include "token.dpp"
};


void zzerror(char* text)
{
	error(curr_token, "syntax error: %s", text);
}


//#line  31 "parser.y"
typedef union {
	token* tok;

	token_list* toks;

	node* n_node;
	tpd_node* n_tpd;
	block_node* n_block;
	stmt_node* n_stmt;
	decl_node* n_decl;
	expr_node* n_expr;
	expr_group_node* n_grp;

	write_param_node* n_wrtp;
	write_list_node* n_wrls;
	case_node* n_case;
	set_item_node* n_item;

	const_def_node* n_cdef;
	type_def_node* n_tdef;
	var_decl_node* n_vdcl;

	field_init_node* n_field;

	param_list_node* n_plist;
	idx_node* n_idx;

	field_list_node* n_fldls;
	variant_part_node* n_varp;
	selector_node* n_sel;
	variant_node* n_vari;
	compound_node* n_comp;

	import_list_node* n_imp;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		547
#define	YYFLAG		-32768
#define	YYNTBASE	90

#define YYTRANSLATE(x) ((unsigned)(x) <= 334 ? yytranslate[x] : 183)

static const char yytranslate[] = { 0,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,    53,
	54,     2,     2,    50,     2,    49,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,    51,    52,     2,
	 2,     2,     2,    58,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	55,     2,    56,    57,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
	 2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
	 6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
	16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
	26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
	36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
	46,    47,    48,    59,    60,    61,    62,    63,    64,    65,
	66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
	76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
	86,    87,    88,    89
};

#if YYDEBUG != 0
static const short yyprhs[] = { 0,
	 0,     1,     4,     6,     8,    10,    13,    20,    22,    28,
	38,    48,    55,    62,    64,    65,    69,    73,    75,    78,
	79,    82,    84,    86,    88,    90,    92,    94,    96,   103,
   107,   108,   111,   113,   115,   117,   119,   121,   123,   125,
   126,   130,   134,   138,   142,   146,   150,   154,   158,   162,
   165,   168,   174,   179,   186,   195,   200,   205,   208,   211,
   213,   215,   220,   224,   228,   230,   234,   236,   240,   241,
   243,   244,   248,   250,   254,   256,   258,   259,   261,   265,
   269,   271,   275,   277,   281,   283,   287,   291,   295,   299,
   303,   307,   311,   315,   319,   323,   327,   331,   335,   339,
   343,   347,   351,   355,   359,   363,   367,   371,   375,   379,
   383,   387,   391,   393,   396,   399,   402,   405,   408,   410,
   414,   419,   423,   426,   431,   438,   440,   442,   444,   446,
   450,   452,   453,   455,   459,   461,   465,   467,   471,   473,
   477,   479,   480,   484,   486,   490,   494,   498,   500,   504,
   506,   510,   516,   520,   522,   526,   528,   532,   535,   536,
   540,   544,   550,   553,   554,   558,   562,   565,   566,   568,
   572,   578,   582,   586,   592,   596,   602,   609,   618,   623,
   630,   637,   646,   655,   666,   672,   681,   692,   700,   703,
   706,   708,   710,   711,   715,   717,   721,   724,   726,   728,
   732,   734,   736,   738,   740,   742,   744,   746,   748,   750,
   752,   754,   756,   758,   760,   762,   764,   766,   768,   770,
   775,   778,   783,   785,   787,   795,   803,   811,   819,   823,
   827,   830,   835,   840,   845,   849,   856,   859,   861,   863,
   865,   867,   870,   874,   876,   878,   881,   884,   889,   890,
   892,   894,   898,   904,   906,   910,   912,   916,   919,   921,
   923,   928,   932,   934,   936,   939,   943
};

static const short yyrhs[] = { -1,
	91,    92,     0,    93,     0,    94,     0,    95,     0,    99,
	49,     0,    30,    16,    97,    52,    99,    49,     0,   100,
	 0,    30,    16,    97,    52,   100,     0,    43,    16,    52,
	20,   103,    19,    96,    10,    49,     0,    43,    16,    52,
	20,   103,    19,    96,   106,    49,     0,    20,   103,    19,
	96,    10,    49,     0,    20,   103,    19,    96,   106,    49,
	 0,   100,     0,     0,    53,    98,    54,     0,    16,    50,
	98,     0,    16,     0,   100,   106,     0,     0,   101,   100,
	 0,   131,     0,   133,     0,   136,     0,   139,     0,   145,
	 0,   143,     0,   102,     0,    43,    16,    52,    20,   103,
	44,     0,    20,   103,    44,     0,     0,   104,   103,     0,
   131,     0,   133,     0,   136,     0,   139,     0,   144,     0,
   143,     0,   102,     0,     0,   118,    22,   116,     0,   118,
	60,   116,     0,   118,    61,   116,     0,   118,    62,   116,
	 0,   118,    63,   116,     0,   118,    64,   116,     0,   118,
	65,   116,     0,   118,    66,   116,     0,   118,    67,   116,
	 0,    15,    17,     0,    15,    16,     0,     5,   116,    25,
   110,    10,     0,    18,   116,    39,   105,     0,    18,   116,
	39,   105,     9,   105,     0,    13,    16,    22,   116,    40,
   116,     7,   105,     0,    46,   116,     7,   105,     0,    34,
   107,    42,   116,     0,    48,   109,     0,    32,   108,     0,
   118,     0,    35,     0,    47,   122,     7,   105,     0,    17,
	51,   105,     0,    16,    51,   105,     0,   106,     0,     4,
   107,    10,     0,   105,     0,   105,    52,   107,     0,     0,
   128,     0,     0,    53,   129,    54,     0,   112,     0,   112,
   111,   107,     0,    27,     0,     9,     0,     0,   113,     0,
   113,    52,   112,     0,   114,    51,   105,     0,   115,     0,
   115,    50,   114,     0,   116,     0,   116,     8,   116,     0,
   117,     0,   116,    75,   116,     0,   116,    76,   116,     0,
   116,    79,   116,     0,   116,    82,   116,     0,   116,    80,
   116,     0,   116,    81,   116,     0,   118,    22,   116,     0,
   118,    60,   116,     0,   118,    61,   116,     0,   118,    62,
   116,     0,   118,    63,   116,     0,   118,    66,   116,     0,
   118,    67,   116,     0,   118,    64,   116,     0,   118,    65,
   116,     0,   116,    83,   116,     0,   116,    85,   116,     0,
   116,    84,   116,     0,   116,    77,   116,     0,   116,    78,
   116,     0,   116,    72,   116,     0,   116,    70,   116,     0,
   116,    71,   116,     0,   116,    73,   116,     0,   116,    68,
   116,     0,   116,    69,   116,     0,   116,    74,   116,     0,
   118,     0,    75,   117,     0,    76,   117,     0,    88,   117,
	 0,    58,   118,     0,    83,   118,     0,   119,     0,    53,
   122,    54,     0,   118,    53,   123,    54,     0,   118,    49,
	16,     0,   118,    57,     0,   118,    55,   122,    56,     0,
	23,    53,   152,    50,   116,    54,     0,   125,     0,    17,
	 0,    31,     0,    37,     0,    55,   120,    56,     0,    16,
	 0,     0,   121,     0,   121,    50,   120,     0,   116,     0,
   116,     8,   116,     0,   116,     0,   116,    50,   122,     0,
   124,     0,   124,    50,   123,     0,   116,     0,     0,    53,
   126,    54,     0,   127,     0,   127,    52,   126,     0,    16,
	51,   116,     0,    53,   122,    54,     0,   130,     0,   130,
	50,   129,     0,   116,     0,   116,    51,   116,     0,   116,
	51,   116,    51,   116,     0,    21,   132,    52,     0,    17,
	 0,    17,    50,   132,     0,    16,     0,    16,    50,   132,
	 0,     6,   134,     0,     0,   135,    52,   134,     0,    16,
	68,   116,     0,    16,    51,   153,    68,   116,     0,    41,
   137,     0,     0,   138,    52,   137,     0,    16,    68,   152,
	 0,    45,   140,     0,     0,   141,     0,   141,    52,    59,
	 0,   141,    52,    59,    52,   140,     0,   141,    52,   140,
	 0,    98,    51,   152,     0,    16,    26,   116,    51,   156,
	 0,    29,    16,   147,     0,    14,    16,   147,    51,   152,
	 0,    29,    16,   147,    52,   146,    52,     0,    14,    16,
   147,    51,   152,    52,   146,    52,     0,    29,    16,   147,
	52,     0,    14,    16,   147,    51,   152,    52,     0,    29,
	16,   147,    52,    99,    52,     0,    14,    16,   147,    51,
   152,    52,    99,    52,     0,    29,    16,    49,    16,   147,
	52,    99,    52,     0,    14,    16,    49,    16,   147,    51,
   152,    52,    99,    52,     0,    14,    16,    52,    99,    52,
	 0,    29,    16,   147,    52,    12,    52,    99,    52,     0,
	14,    16,   147,    51,   152,    52,    12,    52,    99,    52,
	 0,    14,    16,    52,    12,    52,    99,    52,     0,    16,
   146,     0,    59,   146,     0,    16,     0,    59,     0,     0,
	53,   148,    54,     0,   149,     0,   149,    52,   148,     0,
	45,   150,     0,   150,     0,   142,     0,    98,    51,   151,
	 0,    98,     0,   156,     0,   159,     0,   156,     0,   157,
	 0,   165,     0,   166,     0,   163,     0,   171,     0,   162,
	 0,   160,     0,   161,     0,   155,     0,   154,     0,   156,
	 0,   158,     0,   165,     0,   164,     0,   155,     0,    14,
   147,    51,   152,     0,    29,   147,     0,    38,    55,   116,
	56,     0,    16,     0,    38,     0,   172,     3,    55,   175,
	56,    25,   152,     0,   172,     3,    55,   175,    56,    25,
   153,     0,   172,     3,    55,   173,    56,    25,   156,     0,
   172,     3,    55,   173,    56,    25,   159,     0,    53,    98,
	54,     0,   116,     8,   116,     0,    57,   152,     0,   172,
	36,    25,   152,     0,   172,    36,    25,   153,     0,   172,
	33,   177,    10,     0,    24,   167,    10,     0,    24,    53,
	16,    54,   167,    10,     0,   168,   170,     0,   170,     0,
   168,     0,   169,     0,   141,     0,   141,    52,     0,   141,
	52,   169,     0,   143,     0,   144,     0,   143,   170,     0,
   144,   170,     0,   172,    11,    25,   152,     0,     0,    28,
	 0,   174,     0,   174,    52,   173,     0,    16,     8,    16,
	51,   152,     0,   176,     0,   176,    50,   175,     0,   156,
	 0,   116,     8,   116,     0,   178,   179,     0,   178,     0,
   140,     0,     5,   180,    25,   181,     0,    16,    51,   152,
	 0,   152,     0,   182,     0,   182,    52,     0,   182,    52,
   181,     0,   122,    51,    53,   177,    54,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   264,   284,   289,   289,   289,   291,   292,   297,   298,   306,
   308,   310,   312,   315,   318,   319,   321,   322,   324,   329,
   330,   332,   332,   332,   332,   333,   333,   333,   335,   337,
   341,   342,   344,   344,   344,   344,   345,   345,   345,   374,
   375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
   385,   386,   387,   388,   390,   392,   393,   394,   395,   396,
   397,   398,   399,   400,   401,   403,   405,   405,   407,   407,
   409,   410,   412,   413,   425,   425,   427,   428,   429,   431,
   433,   434,   436,   437,   461,   462,   463,   464,   465,   466,
   467,   469,   470,   471,   472,   473,   474,   475,   476,   477,
   480,   481,   482,   483,   484,   486,   487,   488,   489,   490,
   491,   492,   494,   495,   497,   499,   501,   502,   504,   505,
   506,   507,   508,   509,   510,   512,   513,   514,   515,   516,
   517,   519,   520,   521,   523,   524,   526,   526,   528,   529,
   531,   531,   534,   538,   539,   541,   544,   547,   547,   549,
   550,   551,   593,   596,   597,   598,   599,   601,   604,   605,
   607,   608,   610,   613,   614,   616,   618,   621,   622,   623,
   628,   634,   636,   637,   640,   643,   647,   650,   653,   656,
   659,   662,   664,   666,   668,   670,   672,   674,   677,   678,
   679,   680,   683,   684,   686,   687,   689,   690,   690,   692,
   693,   695,   695,   701,   701,   701,   701,   701,   701,   702,
   702,   702,   702,   702,   704,   704,   704,   704,   704,   706,
   708,   710,   712,   713,   715,   718,   721,   723,   726,   728,
   731,   733,   735,   737,   740,   742,   745,   747,   748,   750,
   753,   754,   755,   757,   757,   758,   759,   763,   765,   765,
   767,   768,   770,   773,   773,   776,   777,   780,   783,   786,
   788,   793,   794,   797,   798,   799,   801
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char* const yytname[] = { "$","error","$undefined.","ARRAY",
"BEGIN","CASE","CONST","DO","DOTS","ELSE","END","FIL","FAR","FOR","FUNCTION",
"GOTO","IDENT","ICONST","IF","IMPLEMENTATION","INTERFACE","LABEL","LET","LOOPHOLE",
"OBJECT","OF","ORIGIN","OTHERWISE","PACKED","PROCEDURE","PROGRAM","RCONST","READ",
"RECORD","REPEAT","RETURN","SET","SCONST","STRING","THEN","TO","TYPE","UNTIL",
"UNIT","UNIT_END","VAR","WHILE","WITH","WRITE","'.'","','","':'","';'","'('",
"')'","'['","']'","'^'","'@'","SCOPE","LETADD","LETSUB","LETDIV","LETMUL","LETAND",
"LETOR","LETSHL","LETSHR","EQ","NE","LT","LE","GT","GE","IN","PLUS","MINUS",
"OR","XOR","MOD","DIV","DIVR","MUL","AND","SHR","SHL","UPLUS","UMINUS","NOT",
"ADDRESS","translation","@1","input_file","program","module","unit","unit_def_list",
"prog_param_list","ident_list","block","decl_part_list","decl_part","unit_spec",
"unit_decl_list","unit_decl","statement","compoundst","sequence","actual_params",
"write_params","case_list","otherwise","case_items","case_item","case_elem_list",
"case_elem","expr","simple_expr","primary","constant","set_elem_list","set_elem",
"expr_list","act_param_list","act_param","record_constant","field_init_list",
"field_init_item","expr_group","write_list","write_param","label_decl_part",
"label_list","const_def_part","const_def_list","const_def","type_def_part","type_def_list",
"type_def","var_decl_part","var_decl_list","var_decl","proc_decl","proc_fwd_decl",
"proc_spec","proc_def","qualifiers","formal_params","formal_param_list","formal_param",
"param_decl","param_type","type","const_type","fptr_type","string_type","simple_type",
"array_type","const_array_type","conformant_array_type","enum_type","range_type",
"pointer_type","set_type","const_set_type","record_type","object_type","object_components",
"object_fields","field_decl_list","object_methods","file_type","packed","conformant_indices",
"conformant_index","indices","index_spec","field_list","fixed_part","variant_part",
"selector","variant_list","variant", NULL
};
#endif

static const short yyr1[] = { 0,
	91,    90,    92,    92,    92,    93,    93,    94,    94,    95,
	95,    95,    95,    96,    97,    97,    98,    98,    99,   100,
   100,   101,   101,   101,   101,   101,   101,   101,   102,   102,
   103,   103,   104,   104,   104,   104,   104,   104,   104,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   106,   107,   107,   108,   108,
   109,   109,   110,   110,   111,   111,   112,   112,   112,   113,
   114,   114,   115,   115,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   117,   117,   117,   117,   117,   117,   118,   118,
   118,   118,   118,   118,   118,   119,   119,   119,   119,   119,
   119,   120,   120,   120,   121,   121,   122,   122,   123,   123,
   124,   124,   125,   126,   126,   127,   128,   129,   129,   130,
   130,   130,   131,   132,   132,   132,   132,   133,   134,   134,
   135,   135,   136,   137,   137,   138,   139,   140,   140,   140,
   140,   140,   141,   141,   142,   142,   143,   143,   144,   144,
   145,   145,   145,   145,   145,   145,   145,   145,   146,   146,
   146,   146,   147,   147,   148,   148,   149,   149,   149,   150,
   150,   151,   151,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   153,   153,   153,   153,   153,   154,
   154,   155,   156,   156,   157,   158,   159,   159,   160,   161,
   162,   163,   164,   165,   166,   166,   167,   167,   167,   168,
   169,   169,   169,   170,   170,   170,   170,   171,   172,   172,
   173,   173,   174,   175,   175,   176,   176,   177,   177,   178,
   179,   180,   180,   181,   181,   181,   182
};

static const short yyr2[] = { 0,
	 0,     2,     1,     1,     1,     2,     6,     1,     5,     9,
	 9,     6,     6,     1,     0,     3,     3,     1,     2,     0,
	 2,     1,     1,     1,     1,     1,     1,     1,     6,     3,
	 0,     2,     1,     1,     1,     1,     1,     1,     1,     0,
	 3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
	 2,     5,     4,     6,     8,     4,     4,     2,     2,     1,
	 1,     4,     3,     3,     1,     3,     1,     3,     0,     1,
	 0,     3,     1,     3,     1,     1,     0,     1,     3,     3,
	 1,     3,     1,     3,     1,     3,     3,     3,     3,     3,
	 3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
	 3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
	 3,     3,     1,     2,     2,     2,     2,     2,     1,     3,
	 4,     3,     2,     4,     6,     1,     1,     1,     1,     3,
	 1,     0,     1,     3,     1,     3,     1,     3,     1,     3,
	 1,     0,     3,     1,     3,     3,     3,     1,     3,     1,
	 3,     5,     3,     1,     3,     1,     3,     2,     0,     3,
	 3,     5,     2,     0,     3,     3,     2,     0,     1,     3,
	 5,     3,     3,     5,     3,     5,     6,     8,     4,     6,
	 6,     8,     8,    10,     5,     8,    10,     7,     2,     2,
	 1,     1,     0,     3,     1,     3,     2,     1,     1,     3,
	 1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
	 1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
	 2,     4,     1,     1,     7,     7,     7,     7,     3,     3,
	 2,     4,     4,     4,     3,     6,     2,     1,     1,     1,
	 1,     2,     3,     1,     1,     2,     2,     4,     0,     1,
	 1,     3,     5,     1,     3,     1,     3,     2,     1,     1,
	 4,     3,     1,     1,     2,     3,     5
};

static const short yydefact[] = { 1,
	20,   159,     0,    31,     0,     0,     0,   164,     0,   168,
	 2,     3,     4,     5,     0,     8,    20,    28,    22,    23,
	24,    25,    27,    26,     0,   158,     0,   193,     0,    31,
	 0,     0,    39,     0,    31,    33,    34,    35,    36,    38,
	37,   156,   154,     0,   193,    15,     0,   163,     0,     0,
	18,     0,   167,   169,     6,    40,    19,    21,   249,     0,
   159,     0,    20,     0,     0,   193,     0,   193,     0,    20,
	30,    32,     0,     0,   153,     0,     0,     0,     0,   249,
   164,     0,     0,     0,   249,   168,     0,     0,     0,   131,
   127,     0,     0,   128,    69,    40,    61,   129,     0,     0,
	71,     0,   132,    67,    65,     0,    60,   119,   126,   223,
   250,   224,     0,   219,   215,   216,   218,   217,     0,   131,
   127,     0,     0,     0,     0,     0,   161,    85,   113,   160,
   193,     0,     0,     0,     0,    18,     0,     0,   201,   199,
	 0,   195,   198,   249,     0,     0,     0,     0,    14,   157,
   155,   193,    20,     0,    20,   193,   131,     0,   193,     0,
   249,     0,   166,   214,   213,   204,   205,   211,   212,   210,
   208,   206,   207,   209,     0,   165,    31,     0,    17,   173,
   170,   172,     0,     0,    51,    50,    40,    40,     0,   249,
	 0,    59,    70,     0,     0,   137,     0,     0,    58,   131,
	 0,     0,   144,   135,     0,   133,    40,    66,     0,     0,
   142,     0,   123,     0,     0,     0,     0,     0,     0,     0,
	 0,     0,     0,     0,   168,     0,   117,   114,   113,   115,
   118,   116,     0,     0,     0,     0,     0,     0,     0,     0,
	 0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
	 0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
	20,   185,   193,   193,   197,   249,   194,     0,     0,   249,
   179,    31,     0,     0,     0,     0,   191,   192,     0,     0,
	16,     0,     9,     0,     0,   241,   244,   245,     0,   239,
   240,   238,   221,   131,     0,   231,     0,     0,     0,     0,
	 0,     0,   168,    77,     0,    64,    63,    40,     0,     0,
	 0,    40,     0,    40,   150,     0,   148,     0,   120,   143,
	 0,     0,   130,   132,    68,    41,   122,   141,     0,   139,
	 0,    42,    43,    44,    45,    46,    47,    48,    49,     0,
   162,     0,   260,     0,   259,   249,   110,   111,   107,   108,
   106,   109,   112,    86,    87,   104,   105,    88,    90,    91,
	89,   101,   103,   102,    92,    93,    94,    95,    96,    99,
   100,    97,    98,   249,     0,     0,   175,   224,   200,   202,
   203,     0,   196,    20,     0,     0,    12,    13,    20,    20,
   189,   190,   181,   177,     7,   249,     0,   242,   246,   247,
   235,   237,   229,   230,     0,   249,   249,    20,    29,   174,
   171,     0,    73,    78,     0,    81,    83,     0,    53,     0,
   147,    57,    56,   138,    62,     0,    72,     0,   146,     0,
   145,   136,   134,   121,   142,   124,   222,     0,   256,     0,
   254,   234,   249,   258,   233,     0,   188,   249,     0,     0,
	 0,     0,   180,     0,     0,   220,     0,   243,     0,   248,
   232,     0,    52,    76,    75,    40,    77,    40,     0,     0,
	 0,    40,     0,   151,   149,   140,     0,     0,     0,   131,
   263,     0,    20,   176,     0,    20,   182,   178,   183,   186,
	 0,     0,     0,     0,    74,    79,    80,    82,    84,     0,
	54,   125,     0,   257,   249,   255,   249,     0,     0,     0,
	 0,   251,     0,   236,   249,    10,    11,    40,   152,   226,
   262,     0,   261,   264,   184,     0,     0,     0,   187,   225,
	55,     0,   265,     0,   249,   252,   168,   266,   249,   227,
   228,     0,   253,   267,     0,     0,     0
};

static const short yydefgoto[] = { 545,
	 1,    11,    12,    13,    14,   148,    79,    52,    15,   134,
	17,    18,    34,    35,   104,   105,   106,   192,   199,   412,
   466,   413,   414,   415,   416,   162,   128,   129,   108,   205,
   206,   201,   329,   330,   109,   202,   203,   193,   316,   317,
	19,    44,    20,    26,    27,    21,    48,    49,    22,   343,
	54,   140,    23,    41,    24,   280,    65,   141,   142,   143,
   379,   163,   113,   164,   165,   166,   167,   116,   381,   168,
   169,   170,   171,   117,   172,   173,   289,   290,   291,   292,
   174,   175,   511,   512,   440,   441,   344,   345,   444,   482,
   523,   524
};

static const short yypact[] = { -32768,
   363,    32,    64,   366,    12,    68,    97,   100,   104,   109,
-32768,-32768,-32768,-32768,   -28,   107,   853,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -24,-32768,    98,   123,   161,   366,
   223,   229,-32768,    26,   366,-32768,-32768,-32768,-32768,-32768,
-32768,   199,   209,   204,    23,   208,   205,-32768,   215,   222,
   128,   233,-32768,   239,-32768,   900,-32768,-32768,    90,   313,
	32,   270,   234,   108,   242,   250,   260,   250,   255,   853,
-32768,-32768,    12,    12,-32768,   294,   259,   300,   266,   654,
   100,   301,   313,   300,   654,     2,   313,   306,   206,   272,
   273,   313,   274,-32768,   275,   900,-32768,-32768,   313,   313,
   278,   732,   313,   282,-32768,   316,   407,-32768,-32768,-32768,
-32768,   280,   271,-32768,-32768,-32768,-32768,-32768,    22,-32768,
-32768,   782,   313,   313,   782,   313,  1113,-32768,   927,-32768,
   250,   289,   302,   107,   337,   305,   340,   300,   308,-32768,
   307,   310,-32768,   654,   309,   311,   344,    75,-32768,-32768,
-32768,   250,    88,   322,   853,   250,   858,   126,   250,   751,
   654,   470,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    21,-32768,   366,   963,-32768,-32768,
   318,-32768,   772,   343,-32768,-32768,   900,   900,   523,   654,
   313,-32768,-32768,   336,   426,   928,   372,   313,-32768,   330,
   331,   346,   338,   504,   335,   347,   900,-32768,   313,   382,
   313,   313,-32768,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   348,   109,   377,   163,-32768,   163,-32768,
   163,-32768,   313,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   313,   313,   313,   313,   313,   313,   354,
   853,-32768,   250,   250,-32768,   198,-32768,   108,   360,   654,
	 3,   366,   370,   373,   369,   371,     3,     3,   375,   376,
-32768,   388,   107,   364,   409,   386,    45,    45,   429,    45,
-32768,-32768,-32768,   231,   387,-32768,   313,   385,   417,   418,
	37,    94,   109,   313,   313,-32768,-32768,   900,   394,   391,
   313,   900,   313,   900,   998,   398,   403,   313,-32768,-32768,
   432,   313,-32768,   313,-32768,  1113,-32768,  1113,   411,   413,
   401,  1113,  1113,  1113,  1113,  1113,  1113,  1113,  1113,  1095,
  1113,   663,-32768,   451,   474,    90,   559,   559,   559,   559,
   559,   559,   559,   217,   217,   217,   217,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1113,  1113,  1113,  1113,  1113,  1113,
  1113,  1113,  1113,   654,   423,   430,-32768,-32768,-32768,-32768,
-32768,   480,-32768,   221,   433,   440,-32768,-32768,   853,   853,
-32768,-32768,-32768,-32768,-32768,   654,   434,   109,-32768,-32768,
-32768,-32768,-32768,  1113,   663,   654,   654,   853,-32768,-32768,
-32768,   476,   130,   435,   438,   441,   548,   888,   483,   313,
-32768,  1113,-32768,-32768,-32768,   313,-32768,   313,  1113,   330,
-32768,  1113,-32768,-32768,   313,-32768,-32768,   582,-32768,   437,
   463,-32768,   703,-32768,-32768,   462,-32768,   654,   460,   464,
   465,   467,     3,   505,   506,-32768,   218,-32768,   503,-32768,
-32768,    95,-32768,-32768,-32768,   900,   313,   900,   313,   313,
   313,   900,  1065,  1033,-32768,-32768,   313,   535,   663,    -8,
-32768,   536,   853,-32768,   547,   853,-32768,-32768,-32768,-32768,
   554,   540,   517,   518,-32768,-32768,-32768,-32768,  1113,   452,
-32768,-32768,   313,  1113,    90,-32768,   654,   313,   516,   561,
   514,   519,   557,-32768,   654,-32768,-32768,   900,  1113,-32768,
-32768,   560,-32768,   558,-32768,   596,   588,   547,-32768,-32768,
-32768,   562,   313,   563,   198,-32768,   109,-32768,   654,-32768,
-32768,   591,-32768,-32768,   646,   647,-32768
};

static const short yypgoto[] = { -32768,
-32768,-32768,-32768,-32768,-32768,   240,-32768,   -11,   -52,     5,
-32768,    33,    -4,-32768,  -178,   -13,   -92,-32768,-32768,-32768,
-32768,   182,-32768,   200,-32768,   -53,   191,   -36,-32768,   349,
-32768,   -98,   237,-32768,-32768,   353,-32768,-32768,   247,-32768,
	34,   155,    36,   615,-32768,    47,   600,-32768,    48,     6,
  -145,-32768,    61,  -144,-32768,  -236,   -33,   416,-32768,   549,
-32768,   -49,  -331,-32768,   -54,   -59,-32768,-32768,   153,-32768,
-32768,-32768,-32768,-32768,   -51,-32768,   232,-32768,   292,    55,
-32768,   -58,   165,-32768,  -382,-32768,   158,-32768,-32768,-32768,
   164,-32768
};


#define	YYLAST		1198


static const short yytable[] = { 115,
   119,   197,    57,   194,   114,    16,   127,   118,   306,   307,
   133,    77,   286,   288,   445,    53,  -223,    51,   277,   107,
	55,    58,   459,   298,   224,    67,    59,    42,    43,   178,
	72,   299,   145,   183,   146,   180,    33,    36,   189,    37,
   391,   392,   507,    60,    70,   195,   196,    25,   196,   204,
	38,    39,   139,   225,   225,   408,   300,   226,    29,   107,
   181,   278,    33,    36,    40,    37,   154,    33,    36,    71,
	37,    76,   179,    31,   149,    64,    38,    39,    56,    28,
   409,    38,    39,    45,   273,   227,   229,   229,   231,   229,
	40,   182,   310,     2,   269,    40,   506,   260,    56,   276,
   279,     3,   282,   277,   493,   110,   196,    30,     5,   110,
	56,   296,    46,   331,   325,    47,     6,   111,   275,    50,
	57,   135,   284,   136,    51,   293,   139,   112,     8,   419,
	32,   378,    10,   423,   274,   425,   137,   196,   464,    29,
   309,    51,   288,   288,   315,   288,   278,   452,   295,    61,
   107,   107,   138,    83,    31,   326,   465,   328,   196,   283,
   332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
   107,    62,   301,   520,    63,    64,    66,    84,   285,   347,
   348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
   368,   369,   370,   371,   372,   373,   380,   382,   375,    33,
	36,   210,    37,   110,   424,   211,   452,   212,   287,   213,
   385,   185,   186,    38,    39,   111,     2,   150,   151,   376,
   377,    29,   450,    51,     3,   378,   277,    40,    68,     2,
	30,     5,   410,   404,    69,   132,    31,     3,    73,     6,
   417,   418,   286,    30,     5,    75,   139,   422,    74,   196,
	78,     8,     6,    32,   429,    10,    81,   386,   432,    57,
   204,   107,    80,    82,     8,   107,    32,   107,    10,   278,
	84,   318,   439,    85,   -18,   131,   115,   119,   438,   497,
	86,   114,   144,   501,   118,   244,   245,   246,   247,   248,
   249,   250,    64,    71,    33,    36,   147,    37,   411,   152,
   153,   286,   288,   228,   230,   136,   232,   155,    38,    39,
   177,   184,   187,   188,   446,   208,   190,   191,   120,   121,
   198,   451,    40,   207,   222,    93,   454,   455,   223,   531,
   261,   399,   400,    94,   402,   439,   456,   287,   287,    98,
   287,   438,   263,   262,    84,   264,   460,   461,   266,   270,
   267,   268,   271,   272,   305,   102,   473,   103,     2,   303,
   122,     2,   474,   495,   315,   281,     3,   311,   314,    29,
   318,   328,     4,     5,   319,    30,     5,   123,   124,   321,
   323,     6,     7,   481,    31,   125,   324,   327,   484,   320,
   126,   346,   342,     8,   374,     9,     8,    10,    32,   522,
	10,   384,   149,   417,   396,   417,   499,   500,   387,   439,
   389,   388,   390,   504,   397,   438,   393,   394,   209,   107,
   509,   107,   312,   513,   522,   107,   395,   398,   401,   405,
   403,   406,   407,   420,   421,   115,   119,   430,   494,   519,
   114,   427,   428,   118,   196,   210,   436,   521,   518,   211,
   442,   212,   435,   213,   434,   530,   214,   215,   216,   217,
   218,   219,   220,   221,   447,   540,   382,   297,   443,   196,
   448,   107,   449,   409,   453,   463,   467,   457,   468,   543,
   469,   472,   478,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   322,   479,   483,   485,   486,   487,   287,   488,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   470,   489,   490,   492,   505,
   508,   308,   510,   514,   515,   516,   517,   525,   526,   527,
   528,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   477,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   529,   533,
   532,   534,   535,   539,   537,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   544,   546,   547,   462,   496,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   156,   498,   157,
   121,   476,   433,   431,   475,   130,    93,   158,   157,   121,
   176,   111,   159,   383,    94,    93,   265,   541,   491,   458,
	98,   112,   536,    94,   542,     0,   538,     0,     0,    98,
   378,     0,     0,     0,     0,     0,   160,     0,   103,     0,
   161,   122,     0,     0,     0,   102,   156,   103,   480,   121,
   122,     0,     0,     0,     0,    93,   158,     0,   123,   124,
   111,   159,     0,    94,     0,     0,   125,   123,   124,    98,
   112,   126,     0,     0,     0,   125,     0,   200,   121,     0,
   126,     0,     0,     0,    93,   160,     0,   103,     0,   161,
   122,     0,    94,     0,     0,     0,   294,   121,    98,     0,
	 0,     0,     0,    93,     0,     0,     0,   123,   124,     0,
	 0,    94,     0,     0,   102,   125,   103,    98,     0,   122,
   126,     0,     0,     0,     0,     0,   304,   120,   121,     0,
	 0,     0,     0,   102,    93,   103,   123,   124,   122,     0,
	 0,     0,    94,     0,   125,     0,     0,     0,    98,   126,
	 0,     0,     0,     0,     0,   123,   124,     0,     0,     0,
	 0,     0,     0,   125,   102,     0,   103,     0,   126,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,  -223,     2,     0,
	 0,  -223,  -223,  -223,     0,     0,     3,  -223,     0,     0,
	 0,  -223,    30,     5,     0,     0,  -223,  -223,  -223,     0,
	 0,     6,  -223,     0,     0,     0,  -223,     0,     0,     0,
	 0,     0,     0,     8,     0,    32,     0,    10,  -223,     0,
  -223,  -223,  -223,    56,    87,     0,     0,  -223,     0,  -223,
	 0,  -223,    88,  -223,    89,    90,    91,    92,     0,     0,
	 0,     0,    93,     0,     0,     0,     0,   471,     0,     0,
	94,    95,     0,    96,    97,     0,    98,     0,     0,     0,
	 0,     0,     0,     0,     0,    99,   100,   101,   251,     0,
	 0,     0,   102,     0,   103,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,     0,     0,   210,     0,   313,     0,   211,
	 0,   212,     0,   213,     0,     0,   252,   253,   254,   255,
   256,   257,   258,   259,     0,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   302,     0,     0,     0,     0,     0,     0,
	 0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   426,     0,
	 0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
	 0,     0,     0,     0,     0,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   503,     0,     0,     0,     0,     0,     0,
	 0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   502,     0,
	 0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
	 0,     0,   233,   234,   235,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   437,     0,     0,     0,     0,     0,     0,     0,     0,     0,
	 0,     0,   233,   234,   235,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250
};

static const short yycheck[] = { 59,
	59,   100,    16,    96,    59,     1,    60,    59,   187,   188,
	63,    45,   158,   158,   346,    10,    25,    16,    16,    56,
	49,    17,   405,     3,     3,    30,    51,    16,    17,    83,
	35,    11,    66,    87,    68,    85,     4,     4,    92,     4,
   277,   278,    51,    68,    19,    99,   100,    16,   102,   103,
	 4,     4,    64,    33,    33,    19,    36,    36,    14,    96,
	59,    59,    30,    30,     4,    30,    78,    35,    35,    44,
	35,    49,    84,    29,    70,    53,    30,    30,     4,    16,
	44,    35,    35,    16,    10,   122,   123,   124,   125,   126,
	30,    86,   191,     6,   144,    35,   479,   131,     4,    12,
   153,    14,   155,    16,    10,    16,   160,    20,    21,    16,
	 4,   161,    16,   212,   207,    16,    29,    28,   152,    16,
   134,    14,   156,    16,    16,   159,   138,    38,    41,   308,
	43,    38,    45,   312,   148,   314,    29,   191,     9,    14,
   190,    16,   287,   288,   198,   290,    59,   384,   160,    52,
   187,   188,    45,    26,    29,   209,    27,   211,   212,   155,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   207,    49,   177,   505,    52,    53,    16,    50,    53,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   266,   266,   261,   177,
   177,    49,   177,    16,   313,    53,   453,    55,   158,    57,
   270,    16,    17,   177,   177,    28,     6,    73,    74,   263,
   264,    14,    12,    16,    14,    38,    16,   177,    16,     6,
	20,    21,   302,   297,    16,    12,    29,    14,    50,    29,
   304,   305,   398,    20,    21,    52,   268,   311,    50,   313,
	53,    41,    29,    43,   318,    45,    52,   272,   322,   283,
   324,   308,    68,    52,    41,   312,    43,   314,    45,    59,
	50,    51,   342,    51,    54,    16,   346,   346,   342,   468,
	52,   346,    51,   472,   346,    79,    80,    81,    82,    83,
	84,    85,    53,    44,   272,   272,    52,   272,   303,    16,
	52,   457,   457,   123,   124,    16,   126,    52,   272,   272,
	20,    16,    51,    51,   374,    10,    53,    53,    16,    17,
	53,   384,   272,    52,    55,    23,   389,   390,    68,   518,
	52,   287,   288,    31,   290,   405,   396,   287,   288,    37,
   290,   405,    16,    52,    50,    16,   406,   407,    51,    51,
	54,    52,    52,    20,    22,    53,   420,    55,     6,    52,
	58,     6,   426,   466,   428,    54,    14,    42,     7,    14,
	51,   435,    20,    21,    54,    20,    21,    75,    76,    52,
	56,    29,    30,   443,    29,    83,    50,    16,   448,    54,
	88,    25,    55,    41,    51,    43,    41,    45,    43,   508,
	45,    52,   408,   467,    51,   469,   470,   471,    49,   479,
	52,    49,    52,   477,    16,   479,    52,    52,    22,   466,
   483,   468,     7,   486,   533,   472,    49,    52,    10,    55,
	54,    25,    25,    50,    54,   505,   505,    16,   462,   503,
   505,    54,    50,   505,   508,    49,    56,   507,     7,    53,
	10,    55,    50,    57,    54,   515,    60,    61,    62,    63,
	64,    65,    66,    67,    52,   535,   535,     8,     5,   533,
	51,   518,     3,    44,    52,    10,    52,    54,    51,   539,
	50,     9,    56,    68,    69,    70,    71,    72,    73,    74,
	75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
	85,     8,    50,    52,    55,    52,    52,   457,    52,    68,
	69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
	79,    80,    81,    82,    83,    84,    85,    68,    69,    70,
	71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
	81,    82,    83,    84,    85,     8,    52,    52,    56,    25,
	25,    39,    16,    10,    25,    49,    49,    52,     8,    56,
	52,    68,    69,    70,    71,    72,    73,    74,    75,    76,
	77,    78,    79,    80,    81,    82,    83,    84,    85,     8,
	68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
	78,    79,    80,    81,    82,    83,    84,    85,    52,    52,
	51,    16,    25,    51,    53,    68,    69,    70,    71,    72,
	73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
	83,    84,    85,    75,    76,    77,    78,    79,    80,    81,
	82,    83,    84,    85,    54,     0,     0,   408,   467,    68,
	69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
	79,    80,    81,    82,    83,    84,    85,    14,   469,    16,
	17,   435,   324,   321,   428,    61,    23,    24,    16,    17,
	81,    28,    29,   268,    31,    23,   138,   535,   457,   398,
	37,    38,   528,    31,   537,    -1,   533,    -1,    -1,    37,
	38,    -1,    -1,    -1,    -1,    -1,    53,    -1,    55,    -1,
	57,    58,    -1,    -1,    -1,    53,    14,    55,    16,    17,
	58,    -1,    -1,    -1,    -1,    23,    24,    -1,    75,    76,
	28,    29,    -1,    31,    -1,    -1,    83,    75,    76,    37,
	38,    88,    -1,    -1,    -1,    83,    -1,    16,    17,    -1,
	88,    -1,    -1,    -1,    23,    53,    -1,    55,    -1,    57,
	58,    -1,    31,    -1,    -1,    -1,    16,    17,    37,    -1,
	-1,    -1,    -1,    23,    -1,    -1,    -1,    75,    76,    -1,
	-1,    31,    -1,    -1,    53,    83,    55,    37,    -1,    58,
	88,    -1,    -1,    -1,    -1,    -1,    25,    16,    17,    -1,
	-1,    -1,    -1,    53,    23,    55,    75,    76,    58,    -1,
	-1,    -1,    31,    -1,    83,    -1,    -1,    -1,    37,    88,
	-1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
	-1,    -1,    -1,    83,    53,    -1,    55,    -1,    88,    68,
	69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
	79,    80,    81,    82,    83,    84,    85,     0,     6,    -1,
	-1,     4,     5,     6,    -1,    -1,    14,    10,    -1,    -1,
	-1,    14,    20,    21,    -1,    -1,    19,    20,    21,    -1,
	-1,    29,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
	-1,    -1,    -1,    41,    -1,    43,    -1,    45,    41,    -1,
	43,    44,    45,     4,     5,    -1,    -1,    50,    -1,    52,
	-1,    54,    13,    56,    15,    16,    17,    18,    -1,    -1,
	-1,    -1,    23,    -1,    -1,    -1,    -1,    40,    -1,    -1,
	31,    32,    -1,    34,    35,    -1,    37,    -1,    -1,    -1,
	-1,    -1,    -1,    -1,    -1,    46,    47,    48,    22,    -1,
	-1,    -1,    53,    -1,    55,    68,    69,    70,    71,    72,
	73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
	83,    84,    85,    -1,    -1,    49,    -1,    50,    -1,    53,
	-1,    55,    -1,    57,    -1,    -1,    60,    61,    62,    63,
	64,    65,    66,    67,    -1,    68,    69,    70,    71,    72,
	73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
	83,    84,    85,    51,    -1,    -1,    -1,    -1,    -1,    -1,
	-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
	68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
	78,    79,    80,    81,    82,    83,    84,    85,    51,    -1,
	-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
	-1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,
	73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
	83,    84,    85,    51,    -1,    -1,    -1,    -1,    -1,    -1,
	-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
	68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
	78,    79,    80,    81,    82,    83,    84,    85,    54,    -1,
	-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
	-1,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
	76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
	56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
	-1,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
	76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
	68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
	78,    79,    80,    81,    82,    83,    84,    85
};
/* -*-C-*-  Note some compilers choke on comments on `//#line ' lines.  */
//#line  3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

   /* As a special exception, when this file is copied by Bison into a
	  Bison output file, you may use that output file without restriction.
	  This special exception was added by the Free Software Foundation
	  in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
#pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
	void* alloca(unsigned int);
};
#else /* not __cplusplus */
void* alloca();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

  /* Note: there must be only one dollar sign in this file.
	 It is replaced by the list of actions, each action
	 as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
	 /* Like YYERROR except do call yyerror.
		This remains here temporarily to ease the
		transition to the new meaning of YYERROR, for GCC.
		Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

		/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

   /*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
	(effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

	/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse(void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy(to, from, count)
char* to;
char* from;
int count;
{
	register char* f = from;
	register char* t = to;
	register int i = count;

	while (i-- > 0)
		*t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy(char* to, char* from, int count)
{
	register char* f = from;
	register char* t = to;
	register int i = count;

	while (i-- > 0)
		*t++ = *f++;
}

#endif
#endif

//#line  196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short* yyssp;
  register YYSTYPE* yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short* yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE* yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE* yyls = yylsa;
  YYLTYPE* yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval{};		/*  the variable used to return		*/
  /*  semantic values from the action	*/
  /*  routines				*/

int yylen = 0;

#if YYDEBUG != 0
  if (yydebug)
	fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
	 Waste one element of value and location stack
	 so that they stay on the same level as the state stack.
	 The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

  /* Push a new state, which is found in  yystate  .  */
  /* In all cases, when you get here, the value and location stacks
	 have just been pushed. so pushing a state here evens the stacks.  */
  yynewstate:

	*++yyssp = yystate;

	if (yyssp >= yyss + yystacksize - 1)
	  {
		/* Give user a chance to reallocate the stack */
		/* Use copies of these so that the &'s don't force the real ones into memory. */
		YYSTYPE* yyvs1 = yyvs;
		short* yyss1 = yyss;
  #ifdef YYLSP_NEEDED
		YYLTYPE* yyls1 = yyls;
  #endif

		/* Get the current used size of the three stacks, in elements.  */
		int size = yyssp - yyss + 1;

  #ifdef yyoverflow
		/* Each stack pointer address is followed by the size of
	   the data in use in that stack, in bytes.  */
  #ifdef YYLSP_NEEDED
	   /* This used to be a conditional around just the two extra args,
	  but that might be undefined if yyoverflow is a macro.  */
	   yyoverflow("parser stack overflow",
		  &yyss1, size * sizeof(*yyssp),
		  &yyvs1, size * sizeof(*yyvsp),
		  &yyls1, size * sizeof(*yylsp),
		  &yystacksize);
 #else
	   yyoverflow("parser stack overflow",
		  &yyss1, size * sizeof(*yyssp),
		  &yyvs1, size * sizeof(*yyvsp),
		  &yystacksize);
 #endif

	   yyss = yyss1; yyvs = yyvs1;
 #ifdef YYLSP_NEEDED
	   yyls = yyls1;
 #endif
 #else /* no yyoverflow */
		/* Extend the stack our own way.  */
		if (yystacksize >= YYMAXDEPTH)
	  {
		yyerror("parser stack overflow");
		return 2;
	  }
		yystacksize *= 2;
		if (yystacksize > YYMAXDEPTH)
	  yystacksize = YYMAXDEPTH;
		yyss = (short*)alloca(yystacksize * sizeof(*yyssp));
		__yy_memcpy((char*)yyss, (char*)yyss1, size * sizeof(*yyssp));
		yyvs = (YYSTYPE*)alloca(yystacksize * sizeof(*yyvsp));
		__yy_memcpy((char*)yyvs, (char*)yyvs1, size * sizeof(*yyvsp));
  #ifdef YYLSP_NEEDED
		yyls = (YYLTYPE*)alloca(yystacksize * sizeof(*yylsp));
		__yy_memcpy((char*)yyls, (char*)yyls1, size * sizeof(*yylsp));
  #endif
  #endif /* no yyoverflow */

		yyssp = yyss + size - 1;
		yyvsp = yyvs + size - 1;
  #ifdef YYLSP_NEEDED
		yylsp = yyls + size - 1;
  #endif

  #if YYDEBUG != 0
		if (yydebug)
	  fprintf(stderr, "Stack size increased to %d\n", yystacksize);
  #endif

		if (yyssp >= yyss + yystacksize - 1)
	  YYABORT;
	  }

  #if YYDEBUG != 0
	if (yydebug)
	  fprintf(stderr, "Entering state %d\n", yystate);
  #endif

	goto yybackup;
   yybackup:

	/* Do appropriate processing given the current state.  */
	/* Read a lookahead token if we need one and don't already have one.  */
	/* yyresume: */

	  /* First try to decide what to do without reference to lookahead token.  */

	  yyn = yypact[yystate];
	  if (yyn == YYFLAG)
		goto yydefault;

	  /* Not known => get a lookahead token if don't already have one.  */

	  /* yychar is either YYEMPTY or YYEOF
		 or a valid token in external form.  */

	  if (yychar == YYEMPTY)
		{
	#if YYDEBUG != 0
		  if (yydebug)
		fprintf(stderr, "Reading a token: ");
	#endif
		  yychar = YYLEX;
		}

	  /* Convert token to internal form (in yychar1) for indexing tables with */

	  if (yychar <= 0)		/* This means end of input. */
		{
		  yychar1 = 0;
		  yychar = YYEOF;		/* Don't call YYLEX any more */

	#if YYDEBUG != 0
		  if (yydebug)
		fprintf(stderr, "Now at end of input.\n");
	#endif
		}
	  else
		{
		  yychar1 = YYTRANSLATE(yychar);

	#if YYDEBUG != 0
		  if (yydebug)
		{
		  fprintf(stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
		  /* Give the individual parser a way to print the precise meaning
			 of a token, for further debugging info.  */
	#ifdef YYPRINT
		  YYPRINT(stderr, yychar, yylval);
	#endif
		  fprintf(stderr, ")\n");
		}
	#endif
		}

	  yyn += yychar1;
	  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
		goto yydefault;

	  yyn = yytable[yyn];

	  /* yyn is what to do for this token type in this state.
		 Negative => reduce, -yyn is rule number.
		 Positive => shift, yyn is new state.
		   New state is final state => don't bother to shift,
		   just return success.
		 0, or most negative number => error.  */

	  if (yyn < 0)
		{
		  if (yyn == YYFLAG)
		goto yyerrlab;
		  yyn = -yyn;
		  goto yyreduce;
		}
	  else if (yyn == 0)
		goto yyerrlab;

	  if (yyn == YYFINAL)
		YYACCEPT;

	  /* Shift the lookahead token.  */

	#if YYDEBUG != 0
	  if (yydebug)
		fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
	#endif

	  /* Discard the token being shifted unless it is eof.  */
	  if (yychar != YYEOF)
		yychar = YYEMPTY;

	  *++yyvsp = yylval;
	#ifdef YYLSP_NEEDED
	  * ++yylsp = yylloc;
	#endif

	  /* count tokens shifted since error; after three, turn off error status.  */
	  if (yyerrstatus) yyerrstatus--;

	  yystate = yyn;
	  goto yynewstate;

	  /* Do the default action for the current state.  */
	  yydefault:

		yyn = yydefact[yystate];
		if (yyn == 0)
		  goto yyerrlab;

		/* Do a reduction.  yyn is the number of a rule to reduce with.  */
		yyreduce:
		  yylen = yyr2[yyn];
		  if (yylen > 0)
			yyval = yyvsp[1 - yylen]; /* implement default value of the action */

		#if YYDEBUG != 0
		  if (yydebug)
			{
			  int i;

			  fprintf(stderr, "Reducing via rule %d (line %d), ",
				   yyn, yyrline[yyn]);

			  /* Print the symbols being reduced, and their result.  */
			  for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
			fprintf(stderr, "%s ", yytname[yyrhs[i]]);
			  fprintf(stderr, " -> %s\n", yytname[yyr1[yyn]]);
			}
		#endif


		  switch (yyn) {

		case 1:
			//#line   265 "parser.y"
			{
			  if (turbo_pascal) {
				zzcnv_table[TKN_STRING] = STRING;
				zzcnv_table[TKN_STR] = WRITE;
				zzcnv_table[TKN_SHL] = SHL;
				zzcnv_table[TKN_SHR] = SHR;
				zzcnv_table[TKN_XOR] = XOR;
				zzcnv_table[TKN_UNIT] = UNIT;
				zzcnv_table[TKN_FAR] = FAR;
				zzcnv_table[TKN_IMPLEMENTATION] = IMPLEMENTATION;
				zzcnv_table[TKN_INTERFACE] = INTERFACE;

				zzcnv_table[TKN_OBJECT] = OBJECT;
				zzcnv_table[TKN_CONSTRUCTOR] = PROCEDURE;
				zzcnv_table[TKN_DESTRUCTOR] = PROCEDURE;
			  }
			 else {
			zzcnv_table[TKN_ORIGIN] = ORIGIN;
		  }
		;
			break;
		}
case 2:
	//#line  284 "parser.y"
	{
		yyvsp[0].n_node->attrib(ctx_program);
		yyvsp[0].n_node->translate(ctx_program);
	;
		break;
	}
case 6:
	//#line  291 "parser.y"
	{
	 yyval.n_node = new program_node(NULL, NULL, NULL, NULL, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 7:
	//#line  293 "parser.y"
	{
		yyval.n_node = new program_node(yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_imp, yyvsp[-2].tok, yyvsp[-1].n_block, yyvsp[0].tok);
	;
		break;
	}
case 8:
	//#line  297 "parser.y"
	{
	 yyval.n_node = new module_node(NULL, NULL, NULL, NULL, yyvsp[0].n_decl); ;
	  break;
  }
case 9:
	//#line  299 "parser.y"
	{
		yyval.n_node = new module_node(yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].n_imp, yyvsp[-1].tok, yyvsp[0].n_decl);
	;
		break;
	}
case 10:
	//#line  307 "parser.y"
	{
	 yyval.n_node = new unit_node(yyvsp[-8].tok, yyvsp[-7].tok, yyvsp[-6].tok, yyvsp[-5].tok, yyvsp[-4].n_decl, yyvsp[-3].tok, yyvsp[-2].n_decl, NULL, yyvsp[-1].tok, yyvsp[0].tok); ;
	  break;
  }
case 11:
	//#line  309 "parser.y"
	{
	 yyval.n_node = new unit_node(yyvsp[-8].tok, yyvsp[-7].tok, yyvsp[-6].tok, yyvsp[-5].tok, yyvsp[-4].n_decl, yyvsp[-3].tok, yyvsp[-2].n_decl, yyvsp[-1].n_comp, NULL, yyvsp[0].tok); ;
	  break;
  }
case 12:
	//#line  311 "parser.y"
	{
	 yyval.n_node = new unit_node(NULL, NULL, NULL, yyvsp[-5].tok, yyvsp[-4].n_decl, yyvsp[-3].tok, yyvsp[-2].n_decl, NULL, yyvsp[-1].tok, yyvsp[0].tok); ;
	  break;
  }
case 13:
	//#line  313 "parser.y"
	{
	 yyval.n_node = new unit_node(NULL, NULL, NULL, yyvsp[-5].tok, yyvsp[-4].n_decl, yyvsp[-3].tok, yyvsp[-2].n_decl, yyvsp[-1].n_comp, NULL, yyvsp[0].tok); ;
	  break;
  }
case 15:
	//#line  318 "parser.y"
	{
	 yyval.n_imp = NULL; ;
	  break;
  }
case 16:
	//#line  319 "parser.y"
	{
	 yyval.n_imp = new import_list_node(yyvsp[-2].tok, yyvsp[-1].toks, yyvsp[0].tok); ;
	  break;
  }
case 17:
	//#line  321 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[-2].tok, yyvsp[0].toks); ;
	  break;
  }
case 18:
	//#line  322 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[0].tok); ;
	  break;
  }
case 19:
	//#line  325 "parser.y"
	{
		yyval.n_block = new block_node(yyvsp[-1].n_decl, yyvsp[0].n_comp);
	;
		break;
	}
case 20:
	//#line  329 "parser.y"
	{
	 yyval.n_decl = NULL; ;
	  break;
  }
case 21:
	//#line  330 "parser.y"
	{
	 yyvsp[-1].n_decl->next = yyvsp[0].n_decl; yyval.n_decl = yyvsp[-1].n_decl; ;
	  break;
  }
case 29:
	//#line  336 "parser.y"
	{
	  yyval.n_decl = new unit_spec_node(yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_decl); ;
	 break;
 }
case 30:
	//#line  338 "parser.y"
	{
	  yyval.n_decl = new unit_spec_node(NULL, NULL, NULL, yyvsp[-2].tok, yyvsp[-1].n_decl); ;
	 break;
 }
case 31:
	//#line  341 "parser.y"
	{
	 yyval.n_decl = NULL; ;
	  break;
  }
case 32:
	//#line  342 "parser.y"
	{
	 yyvsp[-1].n_decl->next = yyvsp[0].n_decl; yyval.n_decl = yyvsp[-1].n_decl; ;
	  break;
  }
case 40:
	//#line  374 "parser.y"
	{
	 yyval.n_stmt = new empty_node(curr_token->prev_relevant()); ;
	  break;
  }
case 41:
	//#line  375 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 42:
	//#line  376 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 43:
	//#line  377 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 44:
	//#line  378 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 45:
	//#line  379 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 46:
	//#line  380 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 47:
	//#line  381 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 48:
	//#line  382 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 49:
	//#line  383 "parser.y"
	{
	 yyval.n_stmt = new assign_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 50:
	//#line  384 "parser.y"
	{
	 yyval.n_stmt = new goto_node(yyvsp[-1].tok, yyvsp[0].tok); ;
	  break;
  }
case 51:
	//#line  385 "parser.y"
	{
	 yyval.n_stmt = new goto_node(yyvsp[-1].tok, yyvsp[0].tok); ;
	  break;
  }
case 52:
	//#line  386 "parser.y"
	{
	 yyval.n_stmt = new switch_node(yyvsp[-4].tok, yyvsp[-3].n_expr, yyvsp[-2].tok, yyvsp[-1].n_case, yyvsp[0].tok); ;
	  break;
  }
case 53:
	//#line  387 "parser.y"
	{
	 yyval.n_stmt = new if_node(yyvsp[-3].tok, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_stmt); ;
	  break;
  }
case 54:
	//#line  389 "parser.y"
	{
	 yyval.n_stmt = new if_node(yyvsp[-5].tok, yyvsp[-4].n_expr, yyvsp[-3].tok, yyvsp[-2].n_stmt, yyvsp[-1].tok, yyvsp[0].n_stmt); ;
	  break;
  }
case 55:
	//#line  391 "parser.y"
	{
	 yyval.n_stmt = new for_node(yyvsp[-7].tok, yyvsp[-6].tok, yyvsp[-5].tok, yyvsp[-4].n_expr, yyvsp[-3].tok, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_stmt); ;
	  break;
  }
case 56:
	//#line  392 "parser.y"
	{
	 yyval.n_stmt = new while_node(yyvsp[-3].tok, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_stmt); ;
	  break;
  }
case 57:
	//#line  393 "parser.y"
	{
	 yyval.n_stmt = new repeat_node(yyvsp[-3].tok, yyvsp[-2].n_stmt, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 58:
	//#line  394 "parser.y"
	{
	 yyval.n_stmt = new write_node(yyvsp[-1].tok, yyvsp[0].n_wrls); ;
	  break;
  }
case 59:
	//#line  395 "parser.y"
	{
	 yyval.n_stmt = new read_node(yyvsp[-1].tok, yyvsp[0].n_grp); ;
	  break;
  }
case 60:
	//#line  396 "parser.y"
	{
	 yyval.n_stmt = new pcall_node(yyvsp[0].n_expr); ;
	  break;
  }
case 61:
	//#line  397 "parser.y"
	{
	 yyval.n_stmt = new return_node(yyvsp[0].tok); ;
	  break;
  }
case 62:
	//#line  398 "parser.y"
	{
	 yyval.n_stmt = new with_node(yyvsp[-3].tok, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_stmt); ;
	  break;
  }
case 63:
	//#line  399 "parser.y"
	{
	 yyval.n_stmt = new label_node(yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_stmt); ;
	  break;
  }
case 64:
	//#line  400 "parser.y"
	{
	 yyval.n_stmt = new label_node(yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_stmt); ;
	  break;
  }
case 65:
	//#line  401 "parser.y"
	{
	 yyval.n_stmt = yyvsp[0].n_comp; ;
	  break;
  }
case 66:
	//#line  403 "parser.y"
	{
	 yyval.n_comp = new compound_node(yyvsp[-2].tok, yyvsp[-1].n_stmt, yyvsp[0].tok); ;
	  break;
  }
case 68:
	//#line  405 "parser.y"
	{
	 yyvsp[-2].n_stmt->next = yyvsp[0].n_stmt; yyval.n_stmt = yyvsp[-2].n_stmt; ;
	  break;
  }
case 69:
	//#line  407 "parser.y"
	{
	 yyval.n_grp = NULL; ;
	  break;
  }
case 70:
	//#line  407 "parser.y"
	{
	 yyval.n_grp = yyvsp[0].n_grp; ;
	  break;
  }
case 71:
	//#line  409 "parser.y"
	{
	 yyval.n_wrls = NULL; ;
	  break;
  }
case 72:
	//#line  410 "parser.y"
	{
	 yyval.n_wrls = new write_list_node(yyvsp[-2].tok, yyvsp[-1].n_wrtp, yyvsp[0].tok); ;
	  break;
  }
case 74:
	//#line  414 "parser.y"
	{
			 if (yyvsp[-2].n_case != NULL) {
				 case_node** cpp;
				 for (cpp = &yyvsp[-2].n_case->next; *cpp != NULL; cpp = &(*cpp)->next);
				 *cpp = new case_node(NULL, yyvsp[-1].tok, yyvsp[0].n_stmt);
			 yyval.n_case = yyvsp[-2].n_case;
				 }
	 else {
  yyval.n_case = new case_node(NULL, yyvsp[-1].tok, yyvsp[0].n_stmt);
  }
;
break;
}
case 77:
	//#line  427 "parser.y"
	{
	 yyval.n_case = NULL; ;
	  break;
  }
case 79:
	//#line  429 "parser.y"
	{
	 yyvsp[-2].n_case->next = yyvsp[0].n_case; yyval.n_case = yyvsp[-2].n_case; ;
	  break;
  }
case 80:
	//#line  431 "parser.y"
	{
	 yyval.n_case = new case_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_stmt); ;
	  break;
  }
case 82:
	//#line  434 "parser.y"
	{
	 yyvsp[-2].n_expr->next = yyvsp[0].n_expr; yyval.n_expr = yyvsp[-2].n_expr; ;
	  break;
  }
case 83:
	//#line  436 "parser.y"
	{
	 yyval.n_expr = yyvsp[0].n_expr; ;
	  break;
  }
case 84:
	//#line  437 "parser.y"
	{
	 yyval.n_expr = new case_range_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 86:
	//#line  462 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_add, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 87:
	//#line  463 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_sub, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 88:
	//#line  464 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_mod, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 89:
	//#line  465 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_mul, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 90:
	//#line  466 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_div, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 91:
	//#line  467 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_divr, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 92:
	//#line  469 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_let, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 93:
	//#line  470 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_letadd, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 94:
	//#line  471 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_letsub, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 95:
	//#line  472 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_letdiv, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 96:
	//#line  473 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_letmul, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 97:
	//#line  474 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_letshl, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 98:
	//#line  475 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_letshr, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 99:
	//#line  476 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_letand, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 100:
	//#line  477 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_letor,  yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 101:
	//#line  480 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_and, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 102:
	//#line  481 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_shl, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 103:
	//#line  482 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_shr, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 104:
	//#line  483 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_or, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 105:
	//#line  484 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_xor, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 106:
	//#line  486 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_gt, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 107:
	//#line  487 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_lt, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 108:
	//#line  488 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_le, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 109:
	//#line  489 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_ge, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 110:
	//#line  490 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_eq, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 111:
	//#line  491 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_ne, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 112:
	//#line  492 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_in, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 114:
	//#line  495 "parser.y"
	{
		 yyval.n_expr = new op_node(tn_plus, NULL, yyvsp[-1].tok, yyvsp[0].n_expr); ;
		break;
	}
case 115:
	//#line  498 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_minus, NULL, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 116:
	//#line  500 "parser.y"
	{
	 yyval.n_expr = new op_node(tn_not, NULL, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 117:
	//#line  501 "parser.y"
	{
	 yyval.n_expr = new address_node(yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 118:
	//#line  502 "parser.y"
	{
	 yyval.n_expr = new address_node(yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 120:
	//#line  505 "parser.y"
	{
	 yyval.n_expr = new expr_group_node(yyvsp[-2].tok, yyvsp[-1].n_expr, yyvsp[0].tok); ;
	  break;
  }
case 121:
	//#line  506 "parser.y"
	{
	 yyval.n_expr = new fcall_node(yyvsp[-3].n_expr, yyvsp[-2].tok, yyvsp[-1].n_expr, yyvsp[0].tok); ;
	  break;
  }
case 122:
	//#line  507 "parser.y"
	{
	 yyval.n_expr = new access_expr_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].tok); ;
	  break;
  }
case 123:
	//#line  508 "parser.y"
	{
	 yyval.n_expr = new deref_expr_node(yyvsp[-1].n_expr, yyvsp[0].tok); ;
	  break;
  }
case 124:
	//#line  509 "parser.y"
	{
	 yyval.n_expr = new idx_expr_node(yyvsp[-3].n_expr, yyvsp[-2].tok, yyvsp[-1].n_expr, yyvsp[0].tok); ;
	  break;
  }
case 125:
	//#line  510 "parser.y"
	{
	 yyval.n_expr = new loophole_node(yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_tpd, yyvsp[-2].tok, yyvsp[-1].n_expr, yyvsp[0].tok); ;
	  break;
  }
case 127:
	//#line  513 "parser.y"
	{
	 yyval.n_expr = new integer_node(yyvsp[0].tok); ;
	  break;
  }
case 128:
	//#line  514 "parser.y"
	{
	 yyval.n_expr = new real_node(yyvsp[0].tok); ;
	  break;
  }
case 129:
	//#line  515 "parser.y"
	{
	 yyval.n_expr = new string_node(yyvsp[0].tok); ;
	  break;
  }
case 130:
	//#line  516 "parser.y"
	{
	 yyval.n_expr = new set_node(yyvsp[-2].tok, yyvsp[-1].n_item, yyvsp[0].tok); ;
	  break;
  }
case 131:
	//#line  517 "parser.y"
	{
	 yyval.n_expr = new atom_expr_node(yyvsp[0].tok); ;
	  break;
  }
case 132:
	//#line  519 "parser.y"
	{
	 yyval.n_item = NULL; ;
	  break;
  }
case 134:
	//#line  521 "parser.y"
	{
	 yyvsp[-2].n_item->next = yyvsp[0].n_item; yyval.n_item = yyvsp[-2].n_item; ;
	  break;
  }
case 135:
	//#line  523 "parser.y"
	{
	 yyval.n_item = new set_elem_node(yyvsp[0].n_expr); ;
	  break;
  }
case 136:
	//#line  524 "parser.y"
	{
	 yyval.n_item = new set_range_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 138:
	//#line  526 "parser.y"
	{
	 yyvsp[-2].n_expr->next = yyvsp[0].n_expr; yyval.n_expr = yyvsp[-2].n_expr; ;
	  break;
  }
case 140:
	//#line  529 "parser.y"
	{
	 yyvsp[-2].n_expr->next = yyvsp[0].n_expr; yyval.n_expr = yyvsp[-2].n_expr; ;
	  break;
  }
case 142:
	//#line  531 "parser.y"
	{
	 yyval.n_expr = new skipped_node(curr_token->prev_relevant()); ;
	  break;
  }
case 143:
	//#line  534 "parser.y"
	{
		yyval.n_expr = new record_constant_node(yyvsp[-2].tok, yyvsp[-1].n_field, yyvsp[0].tok);
	;
		break;
	}
case 144:
	//#line  538 "parser.y"
	{
	 yyval.n_field = yyvsp[0].n_field; ;
	  break;
  }
case 145:
	//#line  539 "parser.y"
	{
	 yyvsp[-2].n_field->next = yyvsp[0].n_field; yyval.n_field = yyvsp[-2].n_field; ;
	  break;
  }
case 146:
	//#line  541 "parser.y"
	{
	 yyval.n_field = new field_init_node(yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 147:
	//#line  544 "parser.y"
	{
	 yyval.n_grp = new expr_group_node(yyvsp[-2].tok, yyvsp[-1].n_expr, yyvsp[0].tok); ;
	  break;
  }
case 149:
	//#line  547 "parser.y"
	{
	 yyvsp[-2].n_wrtp->next = yyvsp[0].n_wrtp; yyval.n_wrtp = yyvsp[-2].n_wrtp; ;
	  break;
  }
case 150:
	//#line  549 "parser.y"
	{
	 yyval.n_wrtp = new write_param_node(yyvsp[0].n_expr); ;
	  break;
  }
case 151:
	//#line  550 "parser.y"
	{
	 yyval.n_wrtp = new write_param_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 152:
	//#line  551 "parser.y"
	{
	 yyval.n_wrtp = new write_param_node(yyvsp[-4].n_expr, yyvsp[-3].tok, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 153:
	//#line  594 "parser.y"
	{
	 yyval.n_decl = new label_decl_part_node(yyvsp[-2].tok, yyvsp[-1].toks, yyvsp[0].tok); ;
	  break;
  }
case 154:
	//#line  596 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[0].tok); ;
	  break;
  }
case 155:
	//#line  597 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[-2].tok, yyvsp[0].toks); ;
	  break;
  }
case 156:
	//#line  598 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[0].tok); ;
	  break;
  }
case 157:
	//#line  599 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[-2].tok, yyvsp[0].toks); ;
	  break;
  }
case 158:
	//#line  602 "parser.y"
	{
	 yyval.n_decl = new const_def_part_node(yyvsp[-1].tok, yyvsp[0].n_cdef); ;
	  break;
  }
case 159:
	//#line  604 "parser.y"
	{
	 yyval.n_cdef = NULL; ;
	  break;
  }
case 160:
	//#line  605 "parser.y"
	{
	 yyvsp[-2].n_cdef->next = yyvsp[0].n_cdef; yyval.n_cdef = yyvsp[-2].n_cdef; ;
	  break;
  }
case 161:
	//#line  607 "parser.y"
	{
	 yyval.n_cdef = new const_def_node(yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 162:
	//#line  608 "parser.y"
	{
	 yyval.n_cdef = new typed_const_def_node(yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].n_tpd, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 163:
	//#line  611 "parser.y"
	{
	 yyval.n_decl = new type_def_part_node(yyvsp[-1].tok, yyvsp[0].n_tdef); ;
	  break;
  }
case 164:
	//#line  613 "parser.y"
	{
	 yyval.n_tdef = NULL; ;
	  break;
  }
case 165:
	//#line  614 "parser.y"
	{
	 yyvsp[-2].n_tdef->next = yyvsp[0].n_tdef; yyval.n_tdef = yyvsp[-2].n_tdef; ;
	  break;
  }
case 166:
	//#line  616 "parser.y"
	{
	 yyval.n_tdef = new type_def_node(yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 167:
	//#line  619 "parser.y"
	{
	 yyval.n_decl = new var_decl_part_node(yyvsp[-1].tok, yyvsp[0].n_vdcl); ;
	  break;
  }
case 168:
	//#line  621 "parser.y"
	{
	 yyval.n_vdcl = NULL; ;
	  break;
  }
case 170:
	//#line  624 "parser.y"
	{
		 yyvsp[-2].n_vdcl->scope = yyvsp[0].tok;
		 yyvsp[0].tok->disable();
		   ;
		break;
	}
case 171:
	//#line  629 "parser.y"
	{
		 yyvsp[-4].n_vdcl->scope = yyvsp[-2].tok;
		 token::remove(yyvsp[-2].tok, yyvsp[-1].tok);
		 yyvsp[-4].n_vdcl->next = yyvsp[0].n_vdcl; yyval.n_vdcl = yyvsp[-4].n_vdcl;
		   ;
		break;
	}
case 172:
	//#line  634 "parser.y"
	{
	 yyvsp[-2].n_vdcl->next = yyvsp[0].n_vdcl; yyval.n_vdcl = yyvsp[-2].n_vdcl; ;
	  break;
  }
case 173:
	//#line  636 "parser.y"
	{
	 yyval.n_vdcl = new var_decl_node(yyvsp[-2].toks, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 174:
	//#line  638 "parser.y"
	{
	 yyval.n_vdcl = (var_decl_node*)new var_origin_decl_node(yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 175:
	//#line  642 "parser.y"
	{
	 yyval.n_decl = new proc_decl_node(yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_plist); ;
	  break;
  }
case 176:
	//#line  644 "parser.y"
	{
	 yyval.n_decl = new proc_decl_node(yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].n_plist, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 177:
	//#line  649 "parser.y"
	{
	 yyval.n_decl = new proc_fwd_decl_node(yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_plist, NULL, NULL, yyvsp[-2].tok, yyvsp[-1].toks, yyvsp[0].tok); ;
	  break;
  }
case 178:
	//#line  651 "parser.y"
	{
	 yyval.n_decl = new proc_fwd_decl_node(yyvsp[-7].tok, yyvsp[-6].tok, yyvsp[-5].n_plist, yyvsp[-4].tok, yyvsp[-3].n_tpd, yyvsp[-2].tok, yyvsp[-1].toks, yyvsp[0].tok); ;
	  break;
  }
case 179:
	//#line  655 "parser.y"
	{
	 yyval.n_decl = new proc_fwd_decl_node(yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_plist, NULL, NULL, yyvsp[0].tok); ;
	  break;
  }
case 180:
	//#line  657 "parser.y"
	{
	 yyval.n_decl = new proc_fwd_decl_node(yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_plist, yyvsp[-2].tok, yyvsp[-1].n_tpd, yyvsp[0].tok); ;
	  break;
  }
case 181:
	//#line  661 "parser.y"
	{
	 yyval.n_decl = new proc_def_node(yyvsp[-5].tok, NULL, NULL, yyvsp[-4].tok, yyvsp[-3].n_plist, NULL, NULL, yyvsp[-2].tok, NULL, NULL, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 182:
	//#line  663 "parser.y"
	{
	 yyval.n_decl = new proc_def_node(yyvsp[-7].tok, NULL, NULL, yyvsp[-6].tok, yyvsp[-5].n_plist, yyvsp[-4].tok, yyvsp[-3].n_tpd, yyvsp[-2].tok, NULL, NULL, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 183:
	//#line  665 "parser.y"
	{
	 yyval.n_decl = new proc_def_node(yyvsp[-7].tok, yyvsp[-6].tok, yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_plist, NULL, NULL, yyvsp[-2].tok, NULL, NULL, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 184:
	//#line  667 "parser.y"
	{
	 yyval.n_decl = new proc_def_node(yyvsp[-9].tok, yyvsp[-8].tok, yyvsp[-7].tok, yyvsp[-6].tok, yyvsp[-5].n_plist, yyvsp[-4].tok, yyvsp[-3].n_tpd, yyvsp[-2].tok, NULL, NULL, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 185:
	//#line  669 "parser.y"
	{
	 yyval.n_decl = new proc_def_node(yyvsp[-4].tok, NULL, NULL, yyvsp[-3].tok, NULL, NULL, NULL, yyvsp[-2].tok, NULL, NULL, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 186:
	//#line  671 "parser.y"
	{
	 yyval.n_decl = new proc_def_node(yyvsp[-7].tok, NULL, NULL, yyvsp[-6].tok, yyvsp[-5].n_plist, NULL, NULL, yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 187:
	//#line  673 "parser.y"
	{
	 yyval.n_decl = new proc_def_node(yyvsp[-9].tok, NULL, NULL, yyvsp[-8].tok, yyvsp[-7].n_plist, yyvsp[-6].tok, yyvsp[-5].n_tpd, yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 188:
	//#line  675 "parser.y"
	{
	 yyval.n_decl = new proc_def_node(yyvsp[-6].tok, NULL, NULL, yyvsp[-5].tok, NULL, NULL, NULL, yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_block, yyvsp[0].tok); ;
	  break;
  }
case 189:
	//#line  677 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[-1].tok, yyvsp[0].toks); ;
	  break;
  }
case 190:
	//#line  678 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[-1].tok, yyvsp[0].toks); ;
	  break;
  }
case 191:
	//#line  679 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[0].tok); ;
	  break;
  }
case 192:
	//#line  680 "parser.y"
	{
	 yyval.toks = new token_list(yyvsp[0].tok); ;
	  break;
  }
case 193:
	//#line  683 "parser.y"
	{
	 yyval.n_plist = NULL; ;
	  break;
  }
case 194:
	//#line  684 "parser.y"
	{
	 yyval.n_plist = new param_list_node(yyvsp[-2].tok, yyvsp[-1].n_decl, yyvsp[0].tok); ;
	  break;
  }
case 196:
	//#line  687 "parser.y"
	{
	 yyvsp[-2].n_decl->next = yyvsp[0].n_decl; yyval.n_decl = yyvsp[-2].n_decl; ;
	  break;
  }
case 197:
	//#line  689 "parser.y"
	{
	 yyval.n_decl = new var_decl_part_node(yyvsp[-1].tok, yyvsp[0].n_vdcl); ;
	  break;
  }
case 198:
	//#line  690 "parser.y"
	{
	 yyval.n_decl = yyvsp[0].n_vdcl; ;
	  break;
  }
case 200:
	//#line  692 "parser.y"
	{
	 yyval.n_vdcl = new var_decl_node(yyvsp[-2].toks, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 201:
	//#line  693 "parser.y"
	{
	 yyval.n_vdcl = new var_decl_node(yyvsp[0].toks, NULL, NULL); ;
	  break;
  }
case 220:
	//#line  707 "parser.y"
	{
	 yyval.n_tpd = new fptr_tpd_node(yyvsp[-3].tok, yyvsp[-2].n_plist, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 221:
	//#line  708 "parser.y"
	{
	 yyval.n_tpd = new fptr_tpd_node(yyvsp[-1].tok, yyvsp[0].n_plist); ;
	  break;
  }
case 222:
	//#line  710 "parser.y"
	{
	 yyval.n_tpd = new varying_tpd_node(yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_expr, yyvsp[0].tok); ;
	  break;
  }
case 223:
	//#line  712 "parser.y"
	{
	 yyval.n_tpd = new simple_tpd_node(yyvsp[0].tok); ;
	  break;
  }
case 224:
	//#line  713 "parser.y"
	{
	 yyval.n_tpd = new string_tpd_node(yyvsp[0].tok); ;
	  break;
  }
case 225:
	//#line  716 "parser.y"
	{
	 yyval.n_tpd = new array_tpd_node(yyvsp[-6].tok, yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_idx, yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 226:
	//#line  719 "parser.y"
	{
	 yyval.n_tpd = new array_tpd_node(yyvsp[-6].tok, yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_idx, yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 227:
	//#line  722 "parser.y"
	{
	 yyval.n_tpd = new array_tpd_node(yyvsp[-6].tok, yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_idx, yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 228:
	//#line  724 "parser.y"
	{
	 yyval.n_tpd = new array_tpd_node(yyvsp[-6].tok, yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].n_idx, yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 229:
	//#line  726 "parser.y"
	{
	 yyval.n_tpd = new enum_tpd_node(yyvsp[-2].tok, yyvsp[-1].toks, yyvsp[0].tok); ;
	  break;
  }
case 230:
	//#line  729 "parser.y"
	{
	 yyval.n_tpd = new range_tpd_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 231:
	//#line  731 "parser.y"
	{
	 yyval.n_tpd = new ptr_tpd_node(yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 232:
	//#line  733 "parser.y"
	{
	 yyval.n_tpd = new set_tpd_node(yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 233:
	//#line  735 "parser.y"
	{
	 yyval.n_tpd = new set_tpd_node(yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 234:
	//#line  738 "parser.y"
	{
	 yyval.n_tpd = new record_tpd_node(yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_fldls, yyvsp[0].tok); ;
	  break;
  }
case 235:
	//#line  741 "parser.y"
	{
	 yyval.n_tpd = new object_tpd_node(yyvsp[-2].tok, NULL, NULL, NULL, yyvsp[-1].n_decl, yyvsp[0].tok); ;
	  break;
  }
case 236:
	//#line  743 "parser.y"
	{
	 yyval.n_tpd = new object_tpd_node(yyvsp[-5].tok, yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_decl, yyvsp[0].tok); ;
	  break;
  }
case 237:
	//#line  746 "parser.y"
	{
	 yyvsp[-1].n_decl->next = yyvsp[0].n_decl; yyval.n_decl = yyvsp[-1].n_decl; ;
	  break;
  }
case 240:
	//#line  751 "parser.y"
	{
	 yyval.n_decl = new var_decl_part_node(NULL, yyvsp[0].n_vdcl); ;
	  break;
  }
case 242:
	//#line  754 "parser.y"
	{
	 yyval.n_vdcl = yyvsp[-1].n_vdcl; ;
	  break;
  }
case 243:
	//#line  755 "parser.y"
	{
	 yyvsp[-2].n_vdcl->next = yyvsp[0].n_vdcl; yyval.n_vdcl = yyvsp[-2].n_vdcl; ;
	  break;
  }
case 246:
	//#line  758 "parser.y"
	{
	 yyvsp[-1].n_decl->next = yyvsp[0].n_decl; yyval.n_decl = yyvsp[-1].n_decl; ;
	  break;
  }
case 247:
	//#line  759 "parser.y"
	{
	 yyvsp[-1].n_decl->next = yyvsp[0].n_decl; yyval.n_decl = yyvsp[-1].n_decl; ;
	  break;
  }
case 248:
	//#line  763 "parser.y"
	{
	 yyval.n_tpd = new file_tpd_node(yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 249:
	//#line  765 "parser.y"
	{
	 yyval.tok = NULL; ;
	  break;
  }
case 252:
	//#line  768 "parser.y"
	{
	 yyvsp[-2].n_idx->next = yyvsp[0].n_idx; yyval.n_idx = yyvsp[-2].n_idx; ;
	  break;
  }
case 253:
	//#line  771 "parser.y"
	{
	 yyval.n_idx = new conformant_index_node(yyvsp[-4].tok, yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 255:
	//#line  774 "parser.y"
	{
	 yyvsp[-2].n_idx->next = yyvsp[0].n_idx; yyval.n_idx = yyvsp[-2].n_idx; ;
	  break;
  }
case 256:
	//#line  776 "parser.y"
	{
	 yyval.n_idx = new type_index_node(yyvsp[0].n_tpd); ;
	  break;
  }
case 257:
	//#line  777 "parser.y"
	{
	 yyval.n_idx = new range_index_node(yyvsp[-2].n_expr, yyvsp[-1].tok, yyvsp[0].n_expr); ;
	  break;
  }
case 258:
	//#line  782 "parser.y"
	{
	 yyval.n_fldls = new field_list_node(yyvsp[-1].n_vdcl, yyvsp[0].n_varp); ;
	  break;
  }
case 259:
	//#line  784 "parser.y"
	{
	 yyval.n_fldls = new field_list_node(yyvsp[0].n_vdcl); ;
	  break;
  }
case 261:
	//#line  789 "parser.y"
	{
		yyval.n_varp = new variant_part_node(yyvsp[-3].tok, yyvsp[-2].n_sel, yyvsp[-1].tok, yyvsp[0].n_vari);
	;
		break;
	}
case 262:
	//#line  793 "parser.y"
	{
	 yyval.n_sel = new selector_node(yyvsp[-2].tok, yyvsp[-1].tok, yyvsp[0].n_tpd); ;
	  break;
  }
case 263:
	//#line  794 "parser.y"
	{
	 yyval.n_sel = new selector_node(NULL, NULL, yyvsp[0].n_tpd); ;
	  break;
  }
case 265:
	//#line  798 "parser.y"
	{
	 yyval.n_vari = yyvsp[-1].n_vari; ;
	  break;
  }
case 266:
	//#line  799 "parser.y"
	{
	 yyvsp[-2].n_vari->next = yyvsp[0].n_vari; yyval.n_vari = yyvsp[-2].n_vari; ;
	  break;
  }
case 267:
	//#line  802 "parser.y"
	{
		yyval.n_vari = new variant_node(yyvsp[-4].n_expr, yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[-1].n_fldls, yyvsp[0].tok);
	;
		break;
	}
}
		  /* the action file gets copied in in place of this dollarsign */
	   //#line  498 "/usr/local/share/bison.simple"

		 yyvsp -= yylen;
		 yyssp -= yylen;
	   #ifdef YYLSP_NEEDED
		 yylsp -= yylen;
	   #endif

	   #if YYDEBUG != 0
		 if (yydebug)
		   {
			 short* ssp1 = yyss - 1;
			 fprintf(stderr, "state stack now");
			 while (ssp1 != yyssp)
		   fprintf(stderr, " %d", *++ssp1);
			 fprintf(stderr, "\n");
		   }
	   #endif

		 * ++yyvsp = yyval;

	   #ifdef YYLSP_NEEDED
		 yylsp++;
		 if (yylen == 0)
		   {
			 yylsp->first_line = yylloc.first_line;
			 yylsp->first_column = yylloc.first_column;
			 yylsp->last_line = (yylsp - 1)->last_line;
			 yylsp->last_column = (yylsp - 1)->last_column;
			 yylsp->text = 0;
		   }
		 else
		   {
			 yylsp->last_line = (yylsp + yylen - 1)->last_line;
			 yylsp->last_column = (yylsp + yylen - 1)->last_column;
		   }
	   #endif

		 /* Now "shift" the result of the reduction.
			Determine what state that goes to,
			based on the state we popped back to
			and the rule number reduced by.  */

		 yyn = yyr1[yyn];

		 yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
		 if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
		   yystate = yytable[yystate];
		 else
		   yystate = yydefgoto[yyn - YYNTBASE];

		 goto yynewstate;

	   yyerrlab:   /* here on detecting error */

		 if (!yyerrstatus)
			 /* If not already recovering from an error, report this error.  */
			 {
			   ++yynerrs;

		 #ifdef YYERROR_VERBOSE
			   yyn = yypact[yystate];

			   if (yyn > YYFLAG && yyn < YYLAST)
			 {
			   int size = 0;
			   char* msg;
			   int x, count;

			   count = 0;
			   /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
			   for (x = (yyn < 0 ? -yyn : 0);
					x < (sizeof(yytname) / sizeof(char*)); x++)
				 if (yycheck[x + yyn] == x)
				   size += strlen(yytname[x]) + 15, count++;
			   msg = (char*)malloc(size + 15);
			   if (msg != 0)
				 {
				   strcpy(msg, "parse error");

				   if (count < 5)
				 {
				   count = 0;
				   for (x = (yyn < 0 ? -yyn : 0);
						x < (sizeof(yytname) / sizeof(char*)); x++)
					 if (yycheck[x + yyn] == x)
					   {
					 strcat(msg, count == 0 ? ", expecting `" : " or `");
					 strcat(msg, yytname[x]);
					 strcat(msg, "'");
					 count++;
					   }
				 }
				   yyerror(msg);
				   free(msg);
				 }
			   else
				 yyerror("parse error; also virtual memory exceeded");
			 }
			   else
		 #endif /* YYERROR_VERBOSE */
			 yyerror("parse error");
			 }

		   goto yyerrlab1;
		 yyerrlab1:   /* here on error raised explicitly by an action */

		   if (yyerrstatus == 3)
			 {
			   /* if just tried and failed to reuse lookahead token after an error, discard it.  */

			   /* return failure if at end of input */
			   if (yychar == YYEOF)
			 YYABORT;

		 #if YYDEBUG != 0
			   if (yydebug)
			 fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
		 #endif

			   yychar = YYEMPTY;
			 }

		   /* Else will try to reuse lookahead token
			  after shifting the error token.  */

		   yyerrstatus = 3;		/* Each real token shifted decrements this */

		   goto yyerrhandle;

		 yyerrdefault:  /* current state does not do anything special for the error token. */

		 #if 0
		   /* This is wrong; only states that explicitly want error tokens
			  should shift them.  */
		   yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
		   if (yyn) goto yydefault;
		 #endif

		 yyerrpop:   /* pop the current state because it cannot handle the error token */

		   if (yyssp == yyss) YYABORT;
		   yyvsp--;
		   yystate = *--yyssp;
		 #ifdef YYLSP_NEEDED
		   yylsp--;
		 #endif

		 #if YYDEBUG != 0
		   if (yydebug)
			 {
			   short* ssp1 = yyss - 1;
			   fprintf(stderr, "Error: state stack now");
			   while (ssp1 != yyssp)
			 fprintf(stderr, " %d", *++ssp1);
			   fprintf(stderr, "\n");
			 }
		 #endif

		 yyerrhandle:

		   yyn = yypact[yystate];
		   if (yyn == YYFLAG)
			 goto yyerrdefault;

		   yyn += YYTERROR;
		   if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
			 goto yyerrdefault;

		   yyn = yytable[yyn];
		   if (yyn < 0)
			 {
			   if (yyn == YYFLAG)
			 goto yyerrpop;
			   yyn = -yyn;
			   goto yyreduce;
			 }
		   else if (yyn == 0)
			 goto yyerrpop;

		   if (yyn == YYFINAL)
			 YYACCEPT;

		 #if YYDEBUG != 0
		   if (yydebug)
			 fprintf(stderr, "Shifting error token, ");
		 #endif

		   * ++yyvsp = yylval;
		 #ifdef YYLSP_NEEDED
		   * ++yylsp = yylloc;
		 #endif

		   yystate = yyn;
		   goto yynewstate;
}
//#line  806 "parser.y"


int zzlex() {
	curr_token = curr_token ? curr_token->next_relevant()
		: token::first_relevant();
	if (curr_token->tag == TKN_SCONST) {
		while (curr_token->next != NULL && curr_token->next->tag == TKN_SCONST)
		{
			curr_token->in_text = curr_token->out_text =
				dprintf("%s%s", curr_token->in_text, curr_token->next->in_text);
			curr_token->next->remove();
		}
	}
	else if (turbo_pascal && curr_token->tag == TKN_FILE
		&& curr_token->next_relevant()->tag != TKN_OF)
	{
		curr_token->tag = TKN_IDENT;
		curr_token->in_text = curr_token->out_text = "untyped_file";
		curr_token->name = nm_entry::find("untyped_file");
	}
	zzlval.tok = curr_token;
	return zzcnv_table[curr_token->tag];
}


